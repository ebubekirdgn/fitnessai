{"version":3,"file":"static/js/621.7394fa9f.chunk.js","mappings":"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","sources":["components/Exercises/utils/helperUtils.js","components/Exercises/utils/thresholds.js","components/Exercises/Squat.jsx"],"sourcesContent":["// General utility functions\r\n\r\nexport const getLandmarkPosition = (landmark, frameWidth, frameHeight) => ({\r\n  x: landmark.x * frameWidth,\r\n  y: landmark.y * frameHeight,\r\n});\r\n\r\nexport const getLandmarkFeatures = (poseLandmarks,feature,frameWidth,frameHeight) => {\r\n  const dictFeatures = {\r\n    nose: 0,\r\n    left: {\r\n      shoulder: 11,\r\n      elbow: 13,\r\n      wrist: 15,\r\n      hip: 23,\r\n      knee: 25,\r\n      ankle: 27,\r\n      foot: 31,\r\n    },\r\n    right: {\r\n      shoulder: 12,\r\n      elbow: 14,\r\n      wrist: 16,\r\n      hip: 24,\r\n      knee: 26,\r\n      ankle: 28,\r\n      foot: 32,\r\n    },\r\n  };\r\n\r\n  if (feature === \"nose\") {\r\n    return getLandmarkPosition(\r\n      poseLandmarks[dictFeatures.nose],\r\n      frameWidth,\r\n      frameHeight\r\n    );\r\n  } else if (feature === \"left\" || feature === \"right\") {\r\n    const featureSet = dictFeatures[feature];\r\n    return {\r\n      shoulder: getLandmarkPosition(\r\n        poseLandmarks[featureSet.shoulder],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      elbow: getLandmarkPosition(\r\n        poseLandmarks[featureSet.elbow],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      wrist: getLandmarkPosition(\r\n        poseLandmarks[featureSet.wrist],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      hip: getLandmarkPosition(\r\n        poseLandmarks[featureSet.hip],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      knee: getLandmarkPosition(\r\n        poseLandmarks[featureSet.knee],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      ankle: getLandmarkPosition(\r\n        poseLandmarks[featureSet.ankle],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      foot: getLandmarkPosition(\r\n        poseLandmarks[featureSet.foot],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n    };\r\n  } else {\r\n    throw new Error(\"Feature must be 'nose', 'left', or 'right'.\");\r\n  }\r\n};\r\n\r\nexport const dot = (v1, v2) => v1.x * v2.x + v1.y * v2.y;\r\n\r\nexport const magnitude = (v) => Math.sqrt(v.x * v.x + v.y * v.y);\r\n\r\nexport const findAngle = (p1, p2, refPt = { x: 0, y: 0 }) => {\r\n  const p1Ref = { x: p1.x - refPt.x, y: p1.y - refPt.y };\r\n  const p2Ref = { x: p2.x - refPt.x, y: p2.y - refPt.y };\r\n\r\n  const cosTheta = dot(p1Ref, p2Ref) / (magnitude(p1Ref) * magnitude(p2Ref));\r\n  const theta = Math.acos(Math.max(Math.min(cosTheta, 1.0), -1.0));\r\n  return Math.round(theta * (180 / Math.PI));\r\n};\r\n\r\nexport const drawRoundedRect = (\r\n  ctx,\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  radius,\r\n  fillColor\r\n) => {\r\n  ctx.fillStyle = fillColor;\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.arcTo(x + width, y, x + width, y + height, radius);\r\n  ctx.arcTo(x + width, y + height, x, y + height, radius);\r\n  ctx.arcTo(x, y + height, x, y, radius);\r\n  ctx.arcTo(x, y, x + width, y, radius);\r\n  ctx.closePath();\r\n  ctx.fill();\r\n};\r\n\r\nexport const drawText = (ctx, msg, x, y, options = {}) => {\r\n  const {\r\n    boxWidth = 8,\r\n    textColor = \"rgb(0, 255, 0)\",\r\n    backgroundColor = \"rgb(0, 0, 0)\",\r\n    fontSize = \"16px\",\r\n    fontFamily = \"Arial\",\r\n    paddingX = 20,\r\n    paddingY = 10,\r\n  } = options;\r\n\r\n  ctx.font = `${fontSize} ${fontFamily}`;\r\n  const textMetrics = ctx.measureText(msg);\r\n  const textWidth = textMetrics.width;\r\n  const textHeight = parseInt(fontSize, 10);\r\n\r\n  const rectStartX = x - paddingX;\r\n  const rectStartY = y - textHeight - paddingY;\r\n  const rectWidth = textWidth + 2 * paddingX;\r\n  const rectHeight = textHeight + 2 * paddingY;\r\n\r\n  drawRoundedRect(\r\n    ctx,\r\n    rectStartX,\r\n    rectStartY,\r\n    rectWidth,\r\n    rectHeight,\r\n    boxWidth,\r\n    backgroundColor\r\n  );\r\n  ctx.fillStyle = textColor;\r\n  ctx.fillText(msg, x, y + paddingY / 2);\r\n};\r\n\r\nexport const drawCircle = (ctx, position, radius, color) => {\r\n  ctx.beginPath();\r\n  ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n};\r\n\r\nexport const drawConnector = (ctx, start, end, color, lineWidth) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(start.x, start.y);\r\n  ctx.lineTo(end.x, end.y);\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.stroke();\r\n};\r\n\r\nexport const drawDottedLine = (ctx, start, end, color) => {\r\n  const lineLength = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\r\n  const dotSpacing = 5;\r\n  const numOfDots = Math.floor(lineLength / dotSpacing);\r\n\r\n  for (let i = 0; i < numOfDots; i++) {\r\n    const dotX = start.x + ((end.x - start.x) / numOfDots) * i;\r\n    const dotY = start.y + ((end.y - start.y) / numOfDots) * i;\r\n    ctx.beginPath();\r\n    ctx.arc(dotX, dotY, 1, 0, 2 * Math.PI);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  }\r\n};\r\n\r\nexport const colors = {\r\n  blue: 'rgb(0,127,255)',\r\n  red: 'rgb(255,50,50)',\r\n  green: 'rgb(0,255,127)',\r\n  light_green: 'rgb(100,233,127)',\r\n  yellow: 'rgb(255,255,0)',\r\n  magenta: 'rgb(255,0,255)',\r\n  white: 'rgb(255,255,255)',\r\n  cyan: 'rgb(0,255,255)',\r\n  light_blue: 'rgb(102,204,255)'\r\n};","// BICEPS CURL\r\nexport const thresholdsBicepsCurl = {\r\n    ANGLE_ELBOW: {\r\n      NORMAL: [0, 20],  // Kol tamamen açık (dinlenme durumu)\r\n      TRANS: [21, 70],  // Kol kısmen bükülmüş (geçiş durumu)\r\n      PASS: [71, 140]   // Kol tamamen bükülmüş (tam biceps curl)\r\n    },\r\n    ELBOW_THRESH: [10, 140],  // Minimum ve maksimum bükülme açısı\r\n    INACTIVE_THRESH: 10.0,    // Hareketin inaktif olabileceği maksimum süre (saniye)\r\n    CNT_FRAME_THRESH: 30      // Geri bildirim için gereken minimum kare sayısı\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n//\r\nexport const thresholdsSquatBeginner = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [70, 95]\r\n  },\r\n  HIP_THRESH: [10, 50],\r\n  ANKLE_THRESH: 45,\r\n  KNEE_THRESH: [50, 70, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\nexport const thresholdsSquatPro = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [80, 95]\r\n  },\r\n  HIP_THRESH: [15, 50],\r\n  ANKLE_THRESH: 30,\r\n  KNEE_THRESH: [50, 80, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\nexport const thresholdsCrunchBeginner = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [30, 60], // Doğru crunch açısı\r\n      TRANS: [61, 75],  // Geçiş açısı\r\n      PASS: [76, 90],   // Maksimum kabul edilebilir açılar\r\n  },\r\n  HIP_THRESH: [0, 10], // Kalça kalkış açısı\r\n  NECK_THRESH: [10, 30], // Boyun doğal pozisyon açısı\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50 // Geri bildirim süresi\r\n};\r\n\r\nexport const thresholdsCrunchPro = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [35, 55],\r\n      TRANS: [56, 70],\r\n      PASS: [71, 85],\r\n  },\r\n  HIP_THRESH: [0, 5],\r\n  NECK_THRESH: [5, 20],\r\n  INACTIVE_THRESH: 8.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\n\r\n/*-------------------------------SHOULDER PRESS----------------------------------- */\r\nexport const thresholdsShoulderPress = {\r\n  ANGLE_SHOULDER_ELBOW: {\r\n      NORMAL: [160, 180], // Kollar yukarıda, doğru pozisyon\r\n      TRANS: [100, 160],  // Geçiş pozisyonu\r\n      PASS: [70, 100]     // Kollar aşağıdayken\r\n  },\r\n  ANGLE_ELBOW_WRIST: {\r\n      NORMAL: [170, 180], // Kollar düz\r\n      TRANS: [120, 170],  // Geçiş pozisyonu\r\n  },\r\n  OFFSET_THRESH: 20.0,    // Simetri hatalarını kontrol için\r\n  INACTIVE_THRESH: 10.0,  // Hareketsizlik toleransı\r\n  CNT_FRAME_THRESH: 50    // Geri bildirim gösterim süresi\r\n};\r\n\r\n\r\n/* TRICEPS EXTENSION */\r\n\r\nexport const thresholdsTricepsExtensionBeginner = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [0, 5], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [6, 15],  // Geçiş pozisyonu\r\n    PASS: [16, 25],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\nexport const thresholdsTricepsExtensionPro = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [25, 30], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [31, 89],  // Geçiş pozisyonu\r\n    PASS: [90, 120],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\n\r\n\r\n/* LATERAL RAISE */\r\n\r\nexport const thresholdsLateralRaiseBeginner = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 15], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [16, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n\r\nexport const thresholdsLateralRaisePro = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 10], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [11, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Pose } from \"@mediapipe/pose\";\r\nimport * as cam from \"@mediapipe/camera_utils\";\r\nimport {\r\n  thresholdsSquatBeginner,\r\n  thresholdsSquatPro,\r\n} from \"./utils/thresholds\";\r\nimport {\r\n  getLandmarkFeatures,\r\n  colors,\r\n  findAngle,\r\n  drawText,\r\n  drawCircle,\r\n  drawConnector,\r\n  drawDottedLine,\r\n} from \"./utils/helperUtils\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { sendResults } from \"../../api\";\r\nimport { toast } from \"react-toastify\"; // toast'ı ekleyin\r\nimport \"react-toastify/dist/ReactToastify.css\"; // toast css'i ekleyin\r\n\r\nfunction SquatExercise() {\r\n  //webcam and canvas references\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const poseRef = useRef(null);\r\n\r\n  const { user } = useAuth();\r\n\r\n  // Mode: beginner or pro\r\n  const [isBeginnerMode, setIsBeginnerMode] = useState(true);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [incorrectCount, setIncorrectCount] = useState(0);\r\n  const [isCameraActive, setIsCameraActive] = useState(false);\r\n\r\n  const flipFrameRef = useRef(false);\r\n  const [currentThresholds, setCurrentThresholds] = useState(\r\n    thresholdsSquatBeginner\r\n  );\r\n\r\n  // State tracker for the pose analysis\r\n  const stateTrackerRef = useRef({\r\n    state_seq: [],\r\n    start_inactive_time: Date.now(),\r\n    start_inactive_time_front: Date.now(),\r\n    INACTIVE_TIME: 0.0,\r\n    INACTIVE_TIME_FRONT: 0.0,\r\n    DISPLAY_TEXT: Array(4).fill(false),\r\n    COUNT_FRAMES: Array(4).fill(0),\r\n    LOWER_HIPS: false,\r\n    INCORRECT_POSTURE: false,\r\n    prev_state: null,\r\n    curr_state: null,\r\n    SQUAT_COUNT: 0,\r\n    IMPROPER_SQUAT: 0,\r\n  });\r\n\r\n  const handleModeChange = (event) => {\r\n    const isBeginner = event.target.value === \"beginner\";\r\n    setIsBeginnerMode(isBeginner);\r\n    const newThresholds = isBeginner\r\n      ? thresholdsSquatBeginner\r\n      : thresholdsSquatPro;\r\n    setCurrentThresholds(newThresholds);\r\n    console.log(\"Current Thresholds:\", newThresholds);\r\n  };\r\n\r\n  const sendResultsToBackend = async () => {\r\n    const userId = user?.id; // Aktif kullanıcı ID'sini alın\r\n    const exerciseId = 3; // Triceps Extension'ın veritabanındaki ID'si\r\n    const createdDate = new Date().toISOString(); // Oluşturulma tarihi\r\n\r\n    try {\r\n      const response = await sendResults({\r\n        userId,\r\n        exerciseId,\r\n        correct: correctCount,\r\n        incorrect: incorrectCount,\r\n        createdDate,\r\n      });\r\n      toast.success(`Kayıt işlemi başarıyla tamamlandı! ${response}`);\r\n    } catch (error) {\r\n      toast.error(`Sonuçlar gönderilirken bir hata oluştu: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const FEEDBACK_ID_MAP = {\r\n    0: { text: \"BEND BACKWARDS\", position: 215, color: \"rgb(0,153,255)\" },\r\n    1: { text: \"BEND FORWARD\", position: 215, color: \"rgb(0,153,255)\" },\r\n    2: {\r\n      text: \"KNEE FALLING OVER TOE\",\r\n      position: 170,\r\n      color: \"rgb(255,80,80)\",\r\n    },\r\n    3: { text: \"SQUAT TOO DEEP\", position: 125, color: \"rgb(255,80,80)\" },\r\n  };\r\n\r\n  const resetExercise = () => {\r\n    if (correctCount !== 0 || incorrectCount !== 0) {\r\n      sendResultsToBackend();\r\n    }\r\n\r\n    setCorrectCount(0);\r\n    setIncorrectCount(0);\r\n    stateTrackerRef.current.LATERAL_RAISE_COUNT = 0;\r\n    stateTrackerRef.current.IMPROPER_RAISE = 0;\r\n    // Reset other state variables if needed\r\n\r\n    // Close the pose instance and stop the camera\r\n    if (poseRef.current) {\r\n      poseRef.current.close();\r\n      poseRef.current = null;\r\n    }\r\n    if (cameraRef.current) {\r\n      cameraRef.current.stop();\r\n      cameraRef.current = null;\r\n    }\r\n    if (\r\n      webcamRef.current &&\r\n      webcamRef.current.video &&\r\n      webcamRef.current.video.srcObject\r\n    ) {\r\n      const tracks = webcamRef.current.video.srcObject.getTracks();\r\n      tracks.forEach((track) => track.stop());\r\n      webcamRef.current.video.srcObject = null;\r\n    }\r\n    setIsCameraActive(false);\r\n\r\n    // Clear the canvas\r\n    if (canvasRef.current) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n  };\r\n\r\n  const startExercise = () => {\r\n    setIsCameraActive(true);\r\n    startCamera();\r\n  };\r\n\r\n  const startCamera = () => {\r\n    if (webcamRef.current && webcamRef.current.video) {\r\n      cameraRef.current = new cam.Camera(webcamRef.current.video, {\r\n        onFrame: async () => {\r\n          if (webcamRef.current && webcamRef.current.video && poseRef.current) {\r\n            await poseRef.current.send({ image: webcamRef.current.video });\r\n          }\r\n        },\r\n        width: 640,\r\n        height: 480,\r\n      });\r\n      cameraRef.current.start();\r\n    }\r\n  };\r\n\r\n  // Function to get the state of the knee\r\n  const getState = (kneeAngle) => {\r\n    let state = null;\r\n    if (\r\n      kneeAngle >= currentThresholds.ANGLE_HIP_KNEE_VERT.NORMAL[0] &&\r\n      kneeAngle <= currentThresholds.ANGLE_HIP_KNEE_VERT.NORMAL[1]\r\n    ) {\r\n      state = \"s1\";\r\n    } else if (\r\n      kneeAngle >= currentThresholds.ANGLE_HIP_KNEE_VERT.TRANS[0] &&\r\n      kneeAngle <= currentThresholds.ANGLE_HIP_KNEE_VERT.TRANS[1]\r\n    ) {\r\n      state = \"s2\";\r\n    } else if (\r\n      kneeAngle >= currentThresholds.ANGLE_HIP_KNEE_VERT.PASS[0] &&\r\n      kneeAngle <= currentThresholds.ANGLE_HIP_KNEE_VERT.PASS[1]\r\n    ) {\r\n      state = \"s3\";\r\n    }\r\n    return state;\r\n  };\r\n\r\n  // Update the state sequence based on the new state\r\n  /*\r\n    Bu kod, kullanıcının squat hareketini yaparken diz açısına göre hareketin hangi durumda olduğunu belirler ve sırasıyla bu durumları (state_seq dizisi) takip eder. \r\n    Fonksiyon, squat hareketinin doğru bir sırada ilerleyip ilerlemediğini analiz etmek için kullanılır.\r\n  */\r\n  const updateStateSequence = (newState) => {\r\n    let updatedStateSeq = [...stateTrackerRef.current.state_seq];\r\n\r\n    if (newState === \"s2\") {\r\n      if (\r\n        (!updatedStateSeq.includes(\"s3\") &&\r\n          updatedStateSeq.filter((state) => state === \"s2\").length === 0) ||\r\n        (updatedStateSeq.includes(\"s3\") &&\r\n          updatedStateSeq.filter((state) => state === \"s2\").length === 1)\r\n      ) {\r\n        updatedStateSeq.push(newState);\r\n      }\r\n    } else if (newState === \"s3\") {\r\n      if (!updatedStateSeq.includes(\"s3\") && updatedStateSeq.includes(\"s2\")) {\r\n        updatedStateSeq.push(newState);\r\n      }\r\n    }\r\n\r\n    stateTrackerRef.current.state_seq = updatedStateSeq;\r\n  };\r\n\r\n  // Show feedback based on the current state\r\n  // This function now doesn't require parameters for stateTracker and FEEDBACK_ID_MAP\r\n  const showFeedback = (ctx) => {\r\n    // Access the current state using stateTrackerRef.current\r\n    const stateTracker = stateTrackerRef.current;\r\n\r\n    if (stateTracker.LOWER_HIPS) {\r\n      drawText(ctx, \"LOWER YOUR HIPS\", 30, 80, {\r\n        textColor: \"black\",\r\n        backgroundColor: \"yellow\",\r\n        fontSize: \"16px\",\r\n      });\r\n    }\r\n\r\n    // Iterate over DISPLAY_TEXT to show feedback messages\r\n    stateTracker.DISPLAY_TEXT.forEach((displayText, index) => {\r\n      if (displayText) {\r\n        const feedback = FEEDBACK_ID_MAP[index];\r\n        if (feedback) {\r\n          drawText(ctx, feedback.text, 30, feedback.position, {\r\n            textColor: \"black\",\r\n            backgroundColor: \"yellow\",\r\n            fontSize: \"16px\",\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  // OnResults function to process the pose detection results\r\n  const onResults = useCallback(\r\n    (results) => {\r\n      if (webcamRef.current && canvasRef.current) {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        canvas.width = webcamRef.current.video.videoWidth;\r\n        canvas.height = webcamRef.current.video.videoHeight;\r\n\r\n        const frameWidth = canvas.width;\r\n        const frameHeight = canvas.height;\r\n\r\n        ctx.drawImage(\r\n          webcamRef.current.video,\r\n          0,\r\n          0,\r\n          canvas.width,\r\n          canvas.height\r\n        );\r\n\r\n        let displayInactivity = false;\r\n        let endTime = Date.now();\r\n\r\n        if (results.poseLandmarks) {\r\n          // Calculate coordinates for each key landmark\r\n          const noseCoord = getLandmarkFeatures(\r\n            results.poseLandmarks,\r\n            \"nose\",\r\n            frameWidth,\r\n            frameHeight\r\n          );\r\n          const leftFeatures = getLandmarkFeatures(\r\n            results.poseLandmarks,\r\n            \"left\",\r\n            frameWidth,\r\n            frameHeight\r\n          );\r\n          const rightFeatures = getLandmarkFeatures(\r\n            results.poseLandmarks,\r\n            \"right\",\r\n            frameWidth,\r\n            frameHeight\r\n          );\r\n\r\n          const offsetAngle = findAngle(\r\n            leftFeatures.shoulder,\r\n            rightFeatures.shoulder,\r\n            noseCoord\r\n          ); //Kullanıcının omuz hizasının doğru olduğunu kontrol eder.\r\n\r\n          if (offsetAngle > currentThresholds.OFFSET_THRESH) {\r\n            // Kamera hizası doğru değil ise\r\n            displayInactivity = false; //(hareketsiz veya yanlış pozisyonda)\r\n\r\n            endTime = Date.now(); // Equivalent to time.perf_counter()\r\n            stateTrackerRef.current.INACTIVE_TIME_FRONT +=\r\n              endTime - stateTrackerRef.current.start_inactive_time_front;\r\n            stateTrackerRef.current.start_inactive_time_front = endTime;\r\n\r\n            if (\r\n              stateTrackerRef.current.INACTIVE_TIME_FRONT >=\r\n              currentThresholds.INACTIVE_THRESH\r\n            ) {\r\n              displayInactivity = true; //Kullanıcı uzun süre inaktif veya yanlış pozisyonda.\r\n            }\r\n\r\n            // Burun, sol ve sağ omuz noktaları, belirgin renklerle çizilir.\r\n            drawCircle(ctx, noseCoord, 7, colors.white);\r\n            drawCircle(ctx, leftFeatures.shoulder, 7, colors.yellow);\r\n            drawCircle(ctx, rightFeatures.shoulder, 7, colors.magenta);\r\n\r\n            // Bu kod parçası, kullanıcının kamera görüntüsünü gerektiğinde yatay olarak ters çevirmek (flip) için kullanılır.\r\n            if (flipFrameRef.current) {\r\n              ctx.translate(canvas.width, 0);\r\n              ctx.scale(-1, 1);\r\n              ctx.translate(-canvas.width, 0); // Translate back after flipping\r\n            }\r\n\r\n            if (displayInactivity) {\r\n              // Bu kod, kullanıcı inaktif (hareketsiz veya yanlış pozisyonda) olarak algılandığında sayaçları ve zamanlayıcıyı sıfırlamak için kullanılır.\r\n              stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n              stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n            }\r\n\r\n            drawText(\r\n              ctx,\r\n              `CORRECT: ${stateTrackerRef.current.SQUAT_COUNT}`,\r\n              frameWidth * 0.68,\r\n              30,\r\n              {\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(18, 185, 0)\",\r\n                fontSize: \"14px\", // Adjusted for typical browser scaling; you may need to tweak this\r\n              }\r\n            );\r\n            drawText(\r\n              ctx,\r\n              `INCORRECT: ${stateTrackerRef.current.IMPROPER_SQUAT}`,\r\n              frameWidth * 0.68,\r\n              80,\r\n              {\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(221, 0, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n            drawText(\r\n              ctx,\r\n              \"CAMERA NOT ALIGNED PROPERLY!!!\",\r\n              30,\r\n              frameHeight - 60,\r\n              {\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(255, 153, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n            drawText(\r\n              ctx,\r\n              `OFFSET ANGLE: ${offsetAngle.toFixed(2)}`,\r\n              30,\r\n              frameHeight - 30,\r\n              {\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(255, 153, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Reset inactive times for side view\r\n            stateTrackerRef.current.start_inactive_time = Date.now();\r\n            stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            stateTrackerRef.current.prev_state = null;\r\n            stateTrackerRef.current.curr_state = null;\r\n          } else {\r\n            // Kamera hizası doğru ise yapılacaklar\r\n            stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n            stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n\r\n            //Kullanıcının analiz edilecek tarafını (sol veya sağ) belirlemek.\r\n            const distLShHip = Math.abs(\r\n              leftFeatures.foot.y - leftFeatures.shoulder.y\r\n            );\r\n            const distRShHip = Math.abs(\r\n              rightFeatures.foot.y - rightFeatures.shoulder.y\r\n            );\r\n\r\n            let selectedSideFeatures = null;\r\n            let multiplier = 0;\r\n\r\n            if (distLShHip > distRShHip) {\r\n              selectedSideFeatures = leftFeatures;\r\n              multiplier = -1;\r\n            } else {\r\n              selectedSideFeatures = rightFeatures;\r\n              multiplier = 1;\r\n            }\r\n            // -------------------- Vertical Angle calculation ----------------------------------------------\r\n\r\n            // Kalça dikey açısını hesaplamak.\r\n            const hip_vertical_angle = findAngle(\r\n              selectedSideFeatures.shoulder,\r\n              { x: selectedSideFeatures.hip.x, y: 0 },\r\n              selectedSideFeatures.hip\r\n            );\r\n            drawCircle(ctx, selectedSideFeatures.hip, 15, colors.white); // Kalça noktasını (landmark) beyaz bir daire ile işaretler.\r\n            let verticalStart = {\r\n              x: selectedSideFeatures.hip.x,\r\n              y: selectedSideFeatures.hip.y - 80,\r\n            };\r\n            let verticalEnd = {\r\n              x: selectedSideFeatures.hip.x,\r\n              y: selectedSideFeatures.hip.y + 20,\r\n            };\r\n            drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); //Kalça hizasını göstermek için mavi kesikli bir çizgi çizer.\r\n\r\n            // Diz dikey açısını hesaplamak.\r\n            const knee_vertical_angle = findAngle(\r\n              selectedSideFeatures.hip,\r\n              { x: selectedSideFeatures.knee.x, y: 0 },\r\n              selectedSideFeatures.knee\r\n            );\r\n            drawCircle(ctx, selectedSideFeatures.knee, 10, colors.white); // Diz noktasını beyaz bir daire ile işaretler.\r\n            verticalStart = {\r\n              x: selectedSideFeatures.knee.x,\r\n              y: selectedSideFeatures.knee.y - 50,\r\n            };\r\n            verticalEnd = {\r\n              x: selectedSideFeatures.knee.x,\r\n              y: selectedSideFeatures.knee.y + 20,\r\n            };\r\n            drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); //Diz hizasını göstermek için mavi kesikli bir çizgi çizer.\r\n\r\n            // Ayak bileği dikey açısının hesaplanması.\r\n            const ankle_vertical_angle = findAngle(\r\n              selectedSideFeatures.knee,\r\n              { x: selectedSideFeatures.ankle.x, y: 0 },\r\n              selectedSideFeatures.ankle\r\n            );\r\n            drawCircle(ctx, selectedSideFeatures.ankle, 15, colors.white); // Ayak bileği noktasını beyaz bir daire ile işaretler.\r\n            const ankleVerticalStart = {\r\n              x: selectedSideFeatures.ankle.x,\r\n              y: selectedSideFeatures.ankle.y - 50,\r\n            };\r\n            const ankleVerticalEnd = {\r\n              x: selectedSideFeatures.ankle.x,\r\n              y: selectedSideFeatures.ankle.y + 20,\r\n            };\r\n            drawDottedLine(\r\n              ctx,\r\n              ankleVerticalStart,\r\n              ankleVerticalEnd,\r\n              colors.blue\r\n            ); //Ayak bileği hizasını göstermek için mavi kesikli bir çizgi çizer.\r\n\r\n            // Join landmarks using selectedSideFeatures instead of leftFeatures.\r\n            drawConnector(\r\n              ctx,\r\n              selectedSideFeatures.shoulder,\r\n              selectedSideFeatures.elbow,\r\n              colors.light_blue,\r\n              4\r\n            );\r\n            drawConnector(\r\n              ctx,\r\n              selectedSideFeatures.wrist,\r\n              selectedSideFeatures.elbow,\r\n              colors.light_blue,\r\n              4\r\n            );\r\n            drawConnector(\r\n              ctx,\r\n              selectedSideFeatures.shoulder,\r\n              selectedSideFeatures.hip,\r\n              colors.light_blue,\r\n              4\r\n            );\r\n            drawConnector(\r\n              ctx,\r\n              selectedSideFeatures.knee,\r\n              selectedSideFeatures.hip,\r\n              colors.light_blue,\r\n              4\r\n            );\r\n            drawConnector(\r\n              ctx,\r\n              selectedSideFeatures.ankle,\r\n              selectedSideFeatures.knee,\r\n              colors.light_blue,\r\n              4\r\n            );\r\n            drawConnector(\r\n              ctx,\r\n              selectedSideFeatures.ankle,\r\n              selectedSideFeatures.foot,\r\n              colors.light_blue,\r\n              4\r\n            );\r\n\r\n            drawCircle(ctx, selectedSideFeatures.shoulder, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.elbow, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.wrist, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.hip, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.knee, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.ankle, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.foot, 7, colors.yellow);\r\n\r\n            const curr_state = getState(knee_vertical_angle);\r\n            stateTrackerRef.current.curr_state = curr_state;\r\n            updateStateSequence(curr_state);\r\n\r\n            // ------------- COMPUTE COUNTERS ------------------\r\n            const { state_seq, INCORRECT_POSTURE } = stateTrackerRef.current;\r\n\r\n            if (curr_state === \"s1\") {\r\n              if (state_seq.length === 3 && !INCORRECT_POSTURE) {\r\n                stateTrackerRef.current.SQUAT_COUNT += 1;\r\n                setCorrectCount(stateTrackerRef.current.SQUAT_COUNT);\r\n              } else if (state_seq.includes(\"s2\") && state_seq.length === 1) {\r\n                stateTrackerRef.current.IMPROPER_SQUAT += 1;\r\n                setIncorrectCount(stateTrackerRef.current.IMPROPER_SQUAT);\r\n              } else if (INCORRECT_POSTURE) {\r\n                stateTrackerRef.current.IMPROPER_SQUAT += 1;\r\n                setIncorrectCount(stateTrackerRef.current.IMPROPER_SQUAT);\r\n              }\r\n\r\n              stateTrackerRef.current.state_seq = [];\r\n              stateTrackerRef.current.INCORRECT_POSTURE = false;\r\n            } else {\r\n              // ------------ PERFORM FEEDBACK ACTIONS -------------\r\n              const stateTracker = stateTrackerRef.current;\r\n\r\n              if (hip_vertical_angle > currentThresholds.HIP_THRESH[1]) {\r\n                stateTracker.DISPLAY_TEXT[0] = true;\r\n              } else if (\r\n                hip_vertical_angle < currentThresholds.HIP_THRESH[0] &&\r\n                stateTracker.state_seq.filter((e) => e === \"s2\").length === 1\r\n              ) {\r\n                stateTracker.DISPLAY_TEXT[1] = true;\r\n              }\r\n\r\n              if (\r\n                currentThresholds.KNEE_THRESH[0] < knee_vertical_angle &&\r\n                knee_vertical_angle < currentThresholds.KNEE_THRESH[1] &&\r\n                stateTracker.state_seq.filter((e) => e === \"s2\").length === 1\r\n              ) {\r\n                stateTracker.LOWER_HIPS = true;\r\n              } else if (\r\n                knee_vertical_angle > currentThresholds.KNEE_THRESH[2]\r\n              ) {\r\n                stateTracker.DISPLAY_TEXT[3] = true;\r\n                stateTracker.INCORRECT_POSTURE = true;\r\n              }\r\n\r\n              if (ankle_vertical_angle > currentThresholds.ANKLE_THRESH) {\r\n                stateTracker.DISPLAY_TEXT[2] = true;\r\n                stateTracker.INCORRECT_POSTURE = true;\r\n              }\r\n            }\r\n\r\n            // --------------------- COMPUTE INACTIVITY TIME ------------------------------------------------------\r\n            displayInactivity = false;\r\n\r\n            if (\r\n              stateTrackerRef.current.curr_state ===\r\n              stateTrackerRef.current.prev_state\r\n            ) {\r\n              endTime = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME +=\r\n                endTime - stateTrackerRef.current.start_inactive_time;\r\n              stateTrackerRef.current.start_inactive_time = endTime;\r\n\r\n              if (\r\n                stateTrackerRef.INACTIVE_TIME >=\r\n                currentThresholds.INACTIVE_THRESH\r\n              ) {\r\n                displayInactivity = true;\r\n              }\r\n            } else {\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            }\r\n            // ------------------------------------------------------------------------------------\r\n\r\n            const hipTextCoordX = flipFrameRef.current\r\n              ? frameWidth - selectedSideFeatures.hip.x + 10\r\n              : selectedSideFeatures.hip.x + 10;\r\n            const kneeTextCoordX = flipFrameRef.current\r\n              ? frameWidth - selectedSideFeatures.knee.x + 15\r\n              : selectedSideFeatures.knee.x + 15;\r\n            const ankleTextCoordX = flipFrameRef.current\r\n              ? frameWidth - selectedSideFeatures.ankle.x + 10\r\n              : selectedSideFeatures.ankle.x + 10;\r\n\r\n            if (\r\n              stateTrackerRef.current.state_seq.includes(\"s3\") ||\r\n              curr_state === \"s1\"\r\n            ) {\r\n              stateTrackerRef.current.LOWER_HIPS = false;\r\n            }\r\n\r\n            stateTrackerRef.current.DISPLAY_TEXT.forEach(\r\n              (displayText, index) => {\r\n                if (displayText) {\r\n                  stateTrackerRef.current.COUNT_FRAMES[index] += 1;\r\n                }\r\n              }\r\n            );\r\n\r\n            showFeedback(ctx);\r\n\r\n            if (displayInactivity) {\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            }\r\n\r\n            drawText(\r\n              ctx,\r\n              `Hip Angle: ${hip_vertical_angle.toFixed(2)}`,\r\n              hipTextCoordX,\r\n              selectedSideFeatures.hip[1],\r\n              {\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            drawText(\r\n              ctx,\r\n              `Knee Angle: ${knee_vertical_angle.toFixed(2)}`,\r\n              kneeTextCoordX,\r\n              selectedSideFeatures.knee[1] + 10,\r\n              {\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            drawText(\r\n              ctx,\r\n              `Ankle Angle: ${ankle_vertical_angle.toFixed(2)}`,\r\n              ankleTextCoordX,\r\n              selectedSideFeatures.ankle[1],\r\n              {\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Displaying Correct Squats Count\r\n            drawText(\r\n              ctx,\r\n              `CORRECT: ${stateTrackerRef.current.SQUAT_COUNT}`,\r\n              frameWidth * 0.68,\r\n              30,\r\n              {\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(18, 185, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Displaying Incorrect Squats Count\r\n            drawText(\r\n              ctx,\r\n              `INCORRECT: ${stateTrackerRef.current.IMPROPER_SQUAT}`,\r\n              frameWidth * 0.68,\r\n              80,\r\n              {\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(221, 0, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Resetting Display Text and Count Frames\r\n            stateTrackerRef.current.DISPLAY_TEXT.forEach((_, index) => {\r\n              if (\r\n                stateTrackerRef.current.COUNT_FRAMES[index] >\r\n                currentThresholds.CNT_FRAME_THRESH\r\n              ) {\r\n                stateTrackerRef.current.DISPLAY_TEXT[index] = false;\r\n                stateTrackerRef.current.COUNT_FRAMES[index] = 0;\r\n              }\r\n            });\r\n\r\n            stateTrackerRef.current.prev_state = curr_state;\r\n          }\r\n        } else {\r\n          if (flipFrameRef.current) {\r\n            ctx.translate(canvas.width, 0);\r\n            ctx.scale(-1, 1);\r\n            ctx.drawImage(\r\n              webcamRef.current.video,\r\n              0,\r\n              0,\r\n              canvas.width,\r\n              canvas.height\r\n            );\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transformation to default after flipping\r\n          }\r\n\r\n          const endTime = Date.now();\r\n          stateTrackerRef.current.INACTIVE_TIME +=\r\n            endTime - stateTrackerRef.current.start_inactive_time;\r\n\r\n          let displayInactivity = false;\r\n\r\n          if (\r\n            stateTrackerRef.current.INACTIVE_TIME >=\r\n            currentThresholds.INACTIVE_THRESH\r\n          ) {\r\n            displayInactivity = true;\r\n          }\r\n\r\n          stateTrackerRef.current.start_inactive_time = endTime;\r\n\r\n          drawText(\r\n            ctx,\r\n            `CORRECT: ${stateTrackerRef.current.SQUAT_COUNT}`,\r\n            frameWidth * 0.68,\r\n            30,\r\n            {\r\n              textColor: \"rgb(255, 255, 230)\",\r\n              backgroundColor: \"rgb(18, 185, 0)\",\r\n              fontSize: \"14px\",\r\n            }\r\n          );\r\n\r\n          drawText(\r\n            ctx,\r\n            `INCORRECT: ${stateTrackerRef.current.IMPROPER_SQUAT}`,\r\n            frameWidth * 0.68,\r\n            80,\r\n            {\r\n              textColor: \"rgb(255, 255, 230)\",\r\n              backgroundColor: \"rgb(221, 0, 0)\",\r\n              fontSize: \"14px\",\r\n            }\r\n          );\r\n\r\n          if (displayInactivity) {\r\n            stateTrackerRef.current.start_inactive_time = Date.now();\r\n            stateTrackerRef.current.INACTIVE_TIME = 0;\r\n          }\r\n\r\n          // Reset all other state variables\r\n          stateTrackerRef.current.prev_state = null;\r\n          stateTrackerRef.current.curr_state = null;\r\n          stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n          stateTrackerRef.current.INCORRECT_POSTURE = false;\r\n          stateTrackerRef.current.DISPLAY_TEXT = Array(5).fill(false);\r\n          // stateTrackerRef.current.COUNT_FRAMES = Array(5).fill(0);\r\n          stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n        }\r\n      }\r\n    },\r\n    [webcamRef, canvasRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const pose = new Pose({\r\n      locateFile: (file) =>\r\n        `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,\r\n    });\r\n\r\n    pose.setOptions({\r\n      modelComplexity: 1,\r\n      smoothLandmarks: true,\r\n      enableSegmentation: false,\r\n      smoothSegmentation: false,\r\n      minDetectionConfidence: 0.5,\r\n      minTrackingConfidence: 0.5,\r\n    });\r\n\r\n    poseRef.current = pose;\r\n\r\n    pose.onResults(onResults);\r\n\r\n    return () => {\r\n      if (poseRef.current) {\r\n        poseRef.current.close();\r\n        poseRef.current = null;\r\n      }\r\n      if (cameraRef.current) {\r\n        cameraRef.current.stop();\r\n        cameraRef.current = null;\r\n      }\r\n      if (\r\n        webcamRef.current &&\r\n        webcamRef.current.video &&\r\n        webcamRef.current.video.srcObject\r\n      ) {\r\n        const tracks = webcamRef.current.video.srcObject.getTracks();\r\n        tracks.forEach((track) => track.stop());\r\n        webcamRef.current.video.srcObject = null;\r\n      }\r\n    };\r\n  }, [onResults]); // Notice how we use the onResults function within the dependencies list.\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 col-sm-12 text-center mb-3\">\r\n              <p>Video Alanı</p>\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12 text-center mb-3\">\r\n              <p>Bilgilendirme Alanı</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 col-sm-12 mb-3\">\r\n              <Webcam ref={webcamRef} style={{ display: \"none\" }} />\r\n              <canvas\r\n                ref={canvasRef}\r\n                className=\"h-full w-full object-contain\"\r\n                style={{\r\n                  maxWidth: \"100%\",\r\n                  maxHeight: \"100%\",\r\n                  position: \"relative\",\r\n                  left: 0,\r\n                  top: 0,\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6 col-sm-12\">\r\n              <select\r\n                className=\"form-select\"\r\n                aria-label=\"Default select example\"\r\n                onChange={handleModeChange}\r\n                value={isBeginnerMode ? \"beginner\" : \"pro\"}\r\n              >\r\n                <option className=\"dropdown-item\" value=\"beginner\">\r\n                  Beginner Mode\r\n                </option>\r\n                <option className=\"dropdown-item\" value=\"pro\">\r\n                  Pro Mode\r\n                </option>\r\n              </select>\r\n              <table className=\"table mt-3\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Metric</th>\r\n                    <th scope=\"col\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Correct</td>\r\n                    <td>{correctCount}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Incorrect</td>\r\n                    <td>{incorrectCount}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n              <button className=\"btn btn-success mt-3\" onClick={startExercise}>\r\n                Start Sport\r\n              </button>\r\n              <button\r\n                className=\"btn btn-danger mt-3 ms-2\"\r\n                onClick={resetExercise}\r\n              >\r\n                Finish Sport\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SquatExercise;\r\n"],"names":["getLandmarkPosition","landmark","frameWidth","frameHeight","x","y","getLandmarkFeatures","poseLandmarks","feature","dictFeatures","nose","left","shoulder","elbow","wrist","hip","knee","ankle","foot","right","featureSet","Error","magnitude","v","Math","sqrt","findAngle","p1","p2","refPt","arguments","length","undefined","p1Ref","p2Ref","cosTheta","v1","v2","dot","theta","acos","max","min","round","PI","drawText","ctx","msg","options","boxWidth","textColor","backgroundColor","fontSize","fontFamily","paddingX","paddingY","font","textWidth","measureText","width","textHeight","parseInt","drawRoundedRect","height","radius","fillColor","fillStyle","beginPath","moveTo","arcTo","closePath","fill","fillText","drawCircle","position","color","arc","drawConnector","start","end","lineWidth","lineTo","strokeStyle","stroke","drawDottedLine","lineLength","numOfDots","floor","i","dotX","dotY","colors","blue","red","green","light_green","yellow","magenta","white","cyan","light_blue","thresholdsBicepsCurl","ANGLE_ELBOW","NORMAL","TRANS","PASS","ELBOW_THRESH","INACTIVE_THRESH","CNT_FRAME_THRESH","thresholdsSquatBeginner","ANGLE_HIP_KNEE_VERT","HIP_THRESH","ANKLE_THRESH","KNEE_THRESH","OFFSET_THRESH","thresholdsSquatPro","thresholdsCrunchBeginner","ANGLE_SHOULDER_HIP_VERT","NECK_THRESH","thresholdsCrunchPro","thresholdsTricepsExtensionBeginner","thresholdsTricepsExtensionPro","thresholdsLateralRaiseBeginner","ANGLE_SHOULDER","thresholdsLateralRaisePro","webcamRef","useRef","canvasRef","cameraRef","poseRef","user","useAuth","isBeginnerMode","setIsBeginnerMode","useState","correctCount","setCorrectCount","incorrectCount","setIncorrectCount","isCameraActive","setIsCameraActive","flipFrameRef","currentThresholds","setCurrentThresholds","stateTrackerRef","state_seq","start_inactive_time","Date","now","start_inactive_time_front","INACTIVE_TIME","INACTIVE_TIME_FRONT","DISPLAY_TEXT","Array","COUNT_FRAMES","LOWER_HIPS","INCORRECT_POSTURE","prev_state","curr_state","SQUAT_COUNT","IMPROPER_SQUAT","FEEDBACK_ID_MAP","text","startCamera","current","video","cam","onFrame","async","send","image","onResults","useCallback","results","canvas","getContext","videoWidth","videoHeight","drawImage","displayInactivity","endTime","noseCoord","leftFeatures","rightFeatures","offsetAngle","translate","scale","toFixed","selectedSideFeatures","multiplier","abs","hip_vertical_angle","verticalStart","verticalEnd","knee_vertical_angle","ankle_vertical_angle","ankleVerticalStart","ankleVerticalEnd","kneeAngle","state","getState","newState","updatedStateSeq","includes","filter","push","updateStateSequence","stateTracker","e","hipTextCoordX","kneeTextCoordX","ankleTextCoordX","forEach","displayText","index","feedback","showFeedback","_","setTransform","useEffect","pose","Pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","close","stop","srcObject","getTracks","track","_jsx","_Fragment","children","className","_jsxs","Webcam","ref","style","display","maxWidth","maxHeight","top","onChange","event","isBeginner","target","value","newThresholds","console","log","scope","onClick","startExercise","resetExercise","userId","id","createdDate","toISOString","response","sendResults","exerciseId","correct","incorrect","toast","success","error","message","sendResultsToBackend","LATERAL_RAISE_COUNT","IMPROPER_RAISE","clearRect","fillRect"],"sourceRoot":""}
{"version":3,"file":"static/js/384.5a93517a.chunk.js","mappings":"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","sources":["components/Exercises/utils/helperUtils.js","components/Exercises/utils/thresholds.js","components/Exercises/LateralRaise.jsx"],"sourcesContent":["// General utility functions\r\n\r\nexport const getLandmarkPosition = (landmark, frameWidth, frameHeight) => ({\r\n  x: landmark.x * frameWidth,\r\n  y: landmark.y * frameHeight,\r\n});\r\n\r\nexport const getLandmarkFeatures = (poseLandmarks,feature,frameWidth,frameHeight) => {\r\n  const dictFeatures = {\r\n    nose: 0,\r\n    left: {\r\n      shoulder: 11,\r\n      elbow: 13,\r\n      wrist: 15,\r\n      hip: 23,\r\n      knee: 25,\r\n      ankle: 27,\r\n      foot: 31,\r\n    },\r\n    right: {\r\n      shoulder: 12,\r\n      elbow: 14,\r\n      wrist: 16,\r\n      hip: 24,\r\n      knee: 26,\r\n      ankle: 28,\r\n      foot: 32,\r\n    },\r\n  };\r\n\r\n  if (feature === \"nose\") {\r\n    return getLandmarkPosition(\r\n      poseLandmarks[dictFeatures.nose],\r\n      frameWidth,\r\n      frameHeight\r\n    );\r\n  } else if (feature === \"left\" || feature === \"right\") {\r\n    const featureSet = dictFeatures[feature];\r\n    return {\r\n      shoulder: getLandmarkPosition(\r\n        poseLandmarks[featureSet.shoulder],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      elbow: getLandmarkPosition(\r\n        poseLandmarks[featureSet.elbow],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      wrist: getLandmarkPosition(\r\n        poseLandmarks[featureSet.wrist],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      hip: getLandmarkPosition(\r\n        poseLandmarks[featureSet.hip],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      knee: getLandmarkPosition(\r\n        poseLandmarks[featureSet.knee],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      ankle: getLandmarkPosition(\r\n        poseLandmarks[featureSet.ankle],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      foot: getLandmarkPosition(\r\n        poseLandmarks[featureSet.foot],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n    };\r\n  } else {\r\n    throw new Error(\"Feature must be 'nose', 'left', or 'right'.\");\r\n  }\r\n};\r\n\r\nexport const dot = (v1, v2) => v1.x * v2.x + v1.y * v2.y;\r\n\r\nexport const magnitude = (v) => Math.sqrt(v.x * v.x + v.y * v.y);\r\n\r\nexport const findAngle = (p1, p2, refPt = { x: 0, y: 0 }) => {\r\n  const p1Ref = { x: p1.x - refPt.x, y: p1.y - refPt.y };\r\n  const p2Ref = { x: p2.x - refPt.x, y: p2.y - refPt.y };\r\n\r\n  const cosTheta = dot(p1Ref, p2Ref) / (magnitude(p1Ref) * magnitude(p2Ref));\r\n  const theta = Math.acos(Math.max(Math.min(cosTheta, 1.0), -1.0));\r\n  return Math.round(theta * (180 / Math.PI));\r\n};\r\n\r\nexport const drawRoundedRect = (\r\n  ctx,\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  radius,\r\n  fillColor\r\n) => {\r\n  ctx.fillStyle = fillColor;\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.arcTo(x + width, y, x + width, y + height, radius);\r\n  ctx.arcTo(x + width, y + height, x, y + height, radius);\r\n  ctx.arcTo(x, y + height, x, y, radius);\r\n  ctx.arcTo(x, y, x + width, y, radius);\r\n  ctx.closePath();\r\n  ctx.fill();\r\n};\r\n\r\nexport const drawText = (ctx, msg, x, y, options = {}) => {\r\n  const {\r\n    boxWidth = 8,\r\n    textColor = \"rgb(0, 255, 0)\",\r\n    backgroundColor = \"rgb(0, 0, 0)\",\r\n    fontSize = \"16px\",\r\n    fontFamily = \"Arial\",\r\n    paddingX = 20,\r\n    paddingY = 10,\r\n  } = options;\r\n\r\n  ctx.font = `${fontSize} ${fontFamily}`;\r\n  const textMetrics = ctx.measureText(msg);\r\n  const textWidth = textMetrics.width;\r\n  const textHeight = parseInt(fontSize, 10);\r\n\r\n  const rectStartX = x - paddingX;\r\n  const rectStartY = y - textHeight - paddingY;\r\n  const rectWidth = textWidth + 2 * paddingX;\r\n  const rectHeight = textHeight + 2 * paddingY;\r\n\r\n  drawRoundedRect(\r\n    ctx,\r\n    rectStartX,\r\n    rectStartY,\r\n    rectWidth,\r\n    rectHeight,\r\n    boxWidth,\r\n    backgroundColor\r\n  );\r\n  ctx.fillStyle = textColor;\r\n  ctx.fillText(msg, x, y + paddingY / 2);\r\n};\r\n\r\nexport const drawCircle = (ctx, position, radius, color) => {\r\n  ctx.beginPath();\r\n  ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n};\r\n\r\nexport const drawConnector = (ctx, start, end, color, lineWidth) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(start.x, start.y);\r\n  ctx.lineTo(end.x, end.y);\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.stroke();\r\n};\r\n\r\nexport const drawDottedLine = (ctx, start, end, color) => {\r\n  const lineLength = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\r\n  const dotSpacing = 5;\r\n  const numOfDots = Math.floor(lineLength / dotSpacing);\r\n\r\n  for (let i = 0; i < numOfDots; i++) {\r\n    const dotX = start.x + ((end.x - start.x) / numOfDots) * i;\r\n    const dotY = start.y + ((end.y - start.y) / numOfDots) * i;\r\n    ctx.beginPath();\r\n    ctx.arc(dotX, dotY, 1, 0, 2 * Math.PI);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  }\r\n};\r\n\r\nexport const colors = {\r\n  blue: 'rgb(0,127,255)',\r\n  red: 'rgb(255,50,50)',\r\n  green: 'rgb(0,255,127)',\r\n  light_green: 'rgb(100,233,127)',\r\n  yellow: 'rgb(255,255,0)',\r\n  magenta: 'rgb(255,0,255)',\r\n  white: 'rgb(255,255,255)',\r\n  cyan: 'rgb(0,255,255)',\r\n  light_blue: 'rgb(102,204,255)'\r\n};","// BICEPS CURL\r\nexport const thresholdsBicepsCurl = {\r\n    ANGLE_ELBOW: {\r\n      NORMAL: [0, 20],  // Kol tamamen açık (dinlenme durumu)\r\n      TRANS: [21, 70],  // Kol kısmen bükülmüş (geçiş durumu)\r\n      PASS: [71, 140]   // Kol tamamen bükülmüş (tam biceps curl)\r\n    },\r\n    ELBOW_THRESH: [10, 140],  // Minimum ve maksimum bükülme açısı\r\n    INACTIVE_THRESH: 10.0,    // Hareketin inaktif olabileceği maksimum süre (saniye)\r\n    CNT_FRAME_THRESH: 30      // Geri bildirim için gereken minimum kare sayısı\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n//\r\nexport const thresholdsSquatBeginner = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [70, 95]\r\n  },\r\n  HIP_THRESH: [10, 50],\r\n  ANKLE_THRESH: 45,\r\n  KNEE_THRESH: [50, 70, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\nexport const thresholdsSquatPro = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [80, 95]\r\n  },\r\n  HIP_THRESH: [15, 50],\r\n  ANKLE_THRESH: 30,\r\n  KNEE_THRESH: [50, 80, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\nexport const thresholdsCrunchBeginner = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [30, 60], // Doğru crunch açısı\r\n      TRANS: [61, 75],  // Geçiş açısı\r\n      PASS: [76, 90],   // Maksimum kabul edilebilir açılar\r\n  },\r\n  HIP_THRESH: [0, 10], // Kalça kalkış açısı\r\n  NECK_THRESH: [10, 30], // Boyun doğal pozisyon açısı\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50 // Geri bildirim süresi\r\n};\r\n\r\nexport const thresholdsCrunchPro = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [35, 55],\r\n      TRANS: [56, 70],\r\n      PASS: [71, 85],\r\n  },\r\n  HIP_THRESH: [0, 5],\r\n  NECK_THRESH: [5, 20],\r\n  INACTIVE_THRESH: 8.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\n\r\n/*-------------------------------SHOULDER PRESS----------------------------------- */\r\nexport const thresholdsShoulderPress = {\r\n  ANGLE_SHOULDER_ELBOW: {\r\n      NORMAL: [160, 180], // Kollar yukarıda, doğru pozisyon\r\n      TRANS: [100, 160],  // Geçiş pozisyonu\r\n      PASS: [70, 100]     // Kollar aşağıdayken\r\n  },\r\n  ANGLE_ELBOW_WRIST: {\r\n      NORMAL: [170, 180], // Kollar düz\r\n      TRANS: [120, 170],  // Geçiş pozisyonu\r\n  },\r\n  OFFSET_THRESH: 20.0,    // Simetri hatalarını kontrol için\r\n  INACTIVE_THRESH: 10.0,  // Hareketsizlik toleransı\r\n  CNT_FRAME_THRESH: 50    // Geri bildirim gösterim süresi\r\n};\r\n\r\n\r\n/* TRICEPS EXTENSION */\r\n\r\nexport const thresholdsTricepsExtensionBeginner = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [0, 5], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [6, 15],  // Geçiş pozisyonu\r\n    PASS: [16, 25],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\nexport const thresholdsTricepsExtensionPro = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [25, 30], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [31, 89],  // Geçiş pozisyonu\r\n    PASS: [90, 120],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\n\r\n\r\n/* LATERAL RAISE */\r\n\r\nexport const thresholdsLateralRaiseBeginner = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 15], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [16, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n\r\nexport const thresholdsLateralRaisePro = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 10], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [11, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Pose } from \"@mediapipe/pose\";\r\nimport * as cam from \"@mediapipe/camera_utils\";\r\nimport {thresholdsLateralRaiseBeginner,thresholdsLateralRaisePro,} from \"./utils/thresholds\";\r\nimport {getLandmarkFeatures,colors,findAngle,drawText,drawCircle,drawConnector,drawDottedLine,} from \"./utils/helperUtils\";\r\n\r\nfunction LateralRaiseExercise() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const [isBeginnerMode, setIsBeginnerMode] = useState(true);\r\n  const flipFrameRef = useRef(false);\r\n\r\n  const [currentThresholds, setCurrentThresholds] = useState(thresholdsLateralRaiseBeginner);\r\n\r\n  const stateTrackerRef = useRef({\r\n    state_seq: [],\r\n    start_inactive_time: Date.now(),\r\n    start_inactive_time_front: Date.now(),\r\n    INACTIVE_TIME: 0,\r\n    INACTIVE_TIME_FRONT: 0.0,\r\n    DISPLAY_TEXT: Array(5).fill(false),\r\n    COUNT_FRAMES: Array(5).fill(0),\r\n    INCORRECT_POSTURE: false,\r\n    prev_state: null,\r\n    curr_state: null,\r\n    LATERAL_RAISE_COUNT: 0,\r\n    IMPROPER_RAISE: 0,\r\n  });\r\n\r\n  const FEEDBACK_ID_MAP = {\r\n    0: { text: \"STRAIGHTEN YOUR ELBOWS\", position: 100, color: \"rgb(255,80,80)\" },\r\n    1: { text: \"LOWER YOUR ARMS\", position: 130, color: \"rgb(255,80,80)\" },\r\n    2: { text: \"RAISE YOUR ARMS HIGHER\", position: 160, color: \"rgb(255,80,80)\" },\r\n    3: { text: \"KEEP YOUR ARMS PARALLEL\", position: 190, color: \"rgb(255,80,80)\" },\r\n    4: { text: \"CAMERA NOT ALIGNED PROPERLY!\", position: 50, color: \"rgb(255,153,0)\" },\r\n  };\r\n\r\n  const getState = (shoulderBodyAngle) => {\r\n    if (shoulderBodyAngle >= currentThresholds.ANGLE_SHOULDER.NORMAL[0] && shoulderBodyAngle <= currentThresholds.ANGLE_SHOULDER.NORMAL[1]) {\r\n      return \"s1\";\r\n    } else if (shoulderBodyAngle >= currentThresholds.ANGLE_SHOULDER.TRANS[0] && shoulderBodyAngle <= currentThresholds.ANGLE_SHOULDER.TRANS[1]) {\r\n      return \"s2\";\r\n    } else if (shoulderBodyAngle >= currentThresholds.ANGLE_SHOULDER.PASS[0] && shoulderBodyAngle <= currentThresholds.ANGLE_SHOULDER.PASS[1]) {\r\n      return \"s3\";\r\n    } \r\n    return null;\r\n  };\r\n\r\n  const updateStateSequence = (newState) => {\r\n    let updatedStateSeq = [...stateTrackerRef.current.state_seq];\r\n\r\n    if (newState === \"s2\") {\r\n      if ((!updatedStateSeq.includes(\"s3\") &&  updatedStateSeq.filter((state) => state === \"s2\").length === 0) || (updatedStateSeq.includes(\"s3\") && updatedStateSeq.filter((state) => state === \"s2\").length === 1)) {\r\n        updatedStateSeq.push(newState);\r\n      }\r\n    } else if (newState === \"s3\") {\r\n      if (!updatedStateSeq.includes(\"s3\") && updatedStateSeq.includes(\"s2\")) {\r\n        updatedStateSeq.push(newState);\r\n      }\r\n    }\r\n\r\n    stateTrackerRef.current.state_seq = updatedStateSeq;\r\n  };\r\n\r\n  // This function now doesn't require parameters for stateTracker and FEEDBACK_ID_MAP\r\n    const showFeedback = (ctx) => {\r\n      // Access the current state using stateTrackerRef.current\r\n      const stateTracker = stateTrackerRef.current;\r\n\r\n      // Iterate over DISPLAY_TEXT to show feedback messages\r\n      stateTracker.DISPLAY_TEXT.forEach((displayText, index) => {\r\n        if (displayText) {\r\n          const feedback = FEEDBACK_ID_MAP[index];\r\n          if (feedback) {\r\n            drawText(ctx, feedback.text, 30, feedback.position, {\r\n              textColor: feedback.textColor || \"black\",\r\n              backgroundColor: feedback.backgroundColor || \"yellow\",\r\n              fontSize: \"16px\",\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      // Display a general incorrect posture message if applicable\r\n      if (stateTracker.INCORRECT_POSTURE) {\r\n        drawText(ctx, \"CORRECT YOUR POSTURE\", 30, 300, {\r\n          textColor: \"white\",\r\n          backgroundColor: \"red\",\r\n          fontSize: \"16px\",\r\n        });\r\n      }\r\n    };\r\n  \r\n\r\n  const onResults = useCallback(\r\n    (results) => {\r\n      if (webcamRef.current && canvasRef.current) {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        canvas.width = webcamRef.current.video.videoWidth;\r\n        canvas.height = webcamRef.current.video.videoHeight;\r\n\r\n        const frameWidth = canvas.width;\r\n        const frameHeight = canvas.height;\r\n\r\n        ctx.drawImage(webcamRef.current.video, 0, 0, canvas.width, canvas.height);\r\n\r\n        let displayInactivity = false;\r\n        let endTime = Date.now();\r\n\r\n        if (results.poseLandmarks) {\r\n          // Calculate coordinates for each key landmark\r\n          const noseCoord = getLandmarkFeatures(results.poseLandmarks,\"nose\",frameWidth,frameHeight);\r\n          const leftFeatures = getLandmarkFeatures(results.poseLandmarks,\"left\",canvas.width,canvas.height);\r\n          const rightFeatures = getLandmarkFeatures(results.poseLandmarks,\"right\",canvas.width,canvas.height);\r\n\r\n          const offsetAngle = findAngle(leftFeatures.shoulder,rightFeatures.shoulder,noseCoord); //Kullanıcının omuz hizasının doğru olduğunu kontrol eder.\r\n          \r\n\r\n          if (offsetAngle > currentThresholds.OFFSET_THRESH) {\r\n            displayInactivity = false;\r\n            endTime = Date.now(); // Equivalent to time.perf_counter()\r\n            stateTrackerRef.current.INACTIVE_TIME_FRONT += endTime - stateTrackerRef.current.start_inactive_time_front;\r\n            stateTrackerRef.current.start_inactive_time_front = endTime;\r\n\r\n            if (stateTrackerRef.current.INACTIVE_TIME_FRONT >= currentThresholds.INACTIVE_THRESH) {\r\n              displayInactivity = true; //Kullanıcı uzun süre inaktif veya yanlış pozisyonda.\r\n            } \r\n            // Burun, sol ve sağ omuz noktaları, belirgin renklerle çizilir.\r\n            drawCircle(ctx, noseCoord, 7, colors.white);\r\n            drawCircle(ctx, leftFeatures.shoulder, 7, colors.yellow);\r\n            drawCircle(ctx, rightFeatures.shoulder, 7, colors.magenta);\r\n\r\n             // Bu kod parçası, kullanıcının kamera görüntüsünü gerektiğinde yatay olarak ters çevirmek (flip) için kullanılır. \r\n             if (flipFrameRef.current) {\r\n              ctx.translate(canvas.width, 0);\r\n              ctx.scale(-1, 1);\r\n              ctx.translate(-canvas.width, 0); // Translate back after flipping\r\n            }\r\n\r\n            if (displayInactivity) {\r\n              // Bu kod, kullanıcı inaktif (hareketsiz veya yanlış pozisyonda) olarak algılandığında sayaçları ve zamanlayıcıyı sıfırlamak için kullanılır. \r\n              stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n              stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n            }\r\n\r\n              drawText(ctx,`CORRECT: ${stateTrackerRef.current.LATERAL_RAISE_COUNT}`,frameWidth * 0.68,30,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(18, 185, 0)\",\r\n                  fontSize: \"14px\", // Adjusted for typical browser scaling; you may need to tweak this\r\n                }\r\n              );\r\n              drawText(ctx,`INCORRECT: ${stateTrackerRef.current.IMPROPER_RAISE}`,frameWidth * 0.68,80,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(221, 0, 0)\",\r\n                  fontSize: \"14px\",\r\n                }\r\n              );\r\n              drawText(ctx,\"CAMERA NOT ALIGNED PROPERLY!!!\",30,frameHeight - 60,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(255, 153, 0)\",\r\n                  fontSize: \"14px\",\r\n                }\r\n              );\r\n              drawText(ctx,`OFFSET ANGLE: ${offsetAngle.toFixed(2)}`,30,frameHeight - 30,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(255, 153, 0)\",\r\n                  fontSize: \"14px\",\r\n                }\r\n              );\r\n\r\n\r\n              // Reset inactive times for side view\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n              stateTrackerRef.current.prev_state = null;\r\n              stateTrackerRef.current.curr_state = null;\r\n          }\r\n          else{// Kamera hizası doğru ise yapılacaklar\r\n            stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n            stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n\r\n             // Kullanıcının analiz edilecek tarafını (sol veya sağ) belirlemek\r\n             const distLShHip = Math.abs(leftFeatures.foot.y - leftFeatures.shoulder.y);\r\n             const distRShHip = Math.abs(rightFeatures.foot.y - rightFeatures.shoulder.y);\r\n\r\n             let selectedSideFeatures = null;\r\n             let multiplier = 0;\r\n\r\n             if (distLShHip > distRShHip) {\r\n              selectedSideFeatures = leftFeatures;\r\n              multiplier = -1;\r\n             } else {\r\n              selectedSideFeatures = rightFeatures;\r\n              multiplier = 1;\r\n             }\r\n\r\n             // Omuz dikey açısını hesaplamak\r\n            const shoulder_vertical_angle = findAngle(selectedSideFeatures.hip,{ x: selectedSideFeatures.shoulder.x, y: 0 },selectedSideFeatures.shoulder);\r\n            drawCircle(ctx, selectedSideFeatures.shoulder, 15, colors.white); // Omuz noktasını beyaz bir daire ile işaretler\r\n            let verticalStart = { x: selectedSideFeatures.shoulder.x, y: selectedSideFeatures.shoulder.y - 80 };\r\n            let verticalEnd = { x: selectedSideFeatures.shoulder.x, y: selectedSideFeatures.shoulder.y + 20 };\r\n            drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); // Omuz hizasını göstermek için mavi kesikli bir çizgi çizer\r\n            \r\n            // Dirsek dikey açısını hesaplamak\r\n            const elbow_vertical_angle = findAngle(selectedSideFeatures.shoulder,{ x: selectedSideFeatures.elbow.x, y: 0 },selectedSideFeatures.elbow);\r\n            drawCircle(ctx, selectedSideFeatures.elbow, 10, colors.white); // Dirsek noktasını beyaz bir daire ile işaretler\r\n            verticalStart = { x: selectedSideFeatures.elbow.x, y: selectedSideFeatures.elbow.y - 50 };\r\n            verticalEnd = { x: selectedSideFeatures.elbow.x, y: selectedSideFeatures.elbow.y + 20 };\r\n            drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); // Dirsek hizasını göstermek için mavi kesikli bir çizgi çizer\r\n\r\n            // Bilek dikey açısını hesaplamak\r\n            const wrist_vertical_angle = findAngle(selectedSideFeatures.elbow,{ x: selectedSideFeatures.wrist.x, y: 0 },selectedSideFeatures.wrist);\r\n            drawCircle(ctx, selectedSideFeatures.wrist, 15, colors.white); // Bilek noktasını beyaz bir daire ile işaretler\r\n            verticalStart = { x: selectedSideFeatures.wrist.x, y: selectedSideFeatures.wrist.y - 50 };\r\n            verticalEnd = { x: selectedSideFeatures.wrist.x, y: selectedSideFeatures.wrist.y + 20 };\r\n            drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); // Bilek hizasını göstermek için mavi kesikli bir çizgi çizer\r\n\r\n\r\n            // Landmarkları birleştirme\r\n            drawConnector(ctx, selectedSideFeatures.shoulder, selectedSideFeatures.elbow, colors.light_blue, 4);\r\n            drawConnector(ctx, selectedSideFeatures.elbow, selectedSideFeatures.wrist, colors.light_blue, 4);\r\n\r\n            // Kritik landmarkları işaretleme\r\n            drawCircle(ctx, selectedSideFeatures.shoulder, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.elbow, 7, colors.yellow);\r\n            drawCircle(ctx, selectedSideFeatures.wrist, 7, colors.yellow);\r\n\r\n            const currState = getState(elbow_vertical_angle);\r\n            stateTrackerRef.current.curr_state = currState;\r\n            updateStateSequence(currState);\r\n\r\n            const { state_seq, INCORRECT_POSTURE } = stateTrackerRef.current;\r\n\r\n            if (currState === \"s1\") {\r\n              if (state_seq.length === 3 && !INCORRECT_POSTURE) {\r\n                stateTrackerRef.current.TRICEPS_COUNT += 1;\r\n              } else if (state_seq.includes(\"s2\") && state_seq.length === 1) {\r\n                stateTrackerRef.current.INCORRECT_TRICEPS += 1;\r\n              } else if (INCORRECT_POSTURE) {\r\n                stateTrackerRef.current.INCORRECT_TRICEPS += 1;\r\n              }\r\n\r\n              stateTrackerRef.current.state_seq = [];\r\n              stateTrackerRef.current.INCORRECT_POSTURE = false;\r\n            } else {\r\n              const stateTracker = stateTrackerRef.current;\r\n              // Dirsek açısını kontrol et\r\n              if (elbow_vertical_angle > currentThresholds.ANGLE_SHOULDER.PASS[1]) {\r\n                stateTracker.DISPLAY_TEXT[0] = true; // \"FULLY EXTEND YOUR ARMS\" geri bildirimi\r\n              } else if (\r\n                elbow_vertical_angle < currentThresholds.ANGLE_SHOULDER.NORMAL[0] && stateTracker.state_seq.filter((e) => e === \"s2\").length === 1) {\r\n                stateTracker.DISPLAY_TEXT[1] = true; // \"RETURN TO START POSITION\" geri bildirimi\r\n              }\r\n\r\n              // Omuz hizasını kontrol et\r\n              if (\r\n                Math.abs(selectedSideFeatures.shoulder.x - selectedSideFeatures.elbow.x) >\r\n                currentThresholds.OFFSET_THRESH\r\n              ) {\r\n                stateTracker.DISPLAY_TEXT[2] = true; // \"KEEP ELBOWS CLOSE TO HEAD\" geri bildirimi\r\n                stateTracker.INCORRECT_POSTURE = true;\r\n              }\r\n\r\n              // Kolların doğru hizalanmasını kontrol et\r\n              if (\r\n                Math.abs(selectedSideFeatures.wrist.y - selectedSideFeatures.elbow.y) <\r\n                currentThresholds.WRIST_THRESH\r\n              ) {\r\n                stateTracker.DISPLAY_TEXT[3] = true; // \"DO NOT FLARE ELBOWS\" geri bildirimi\r\n                stateTracker.INCORRECT_POSTURE = true;\r\n              }\r\n            }\r\n            // --------------------- COMPUTE INACTIVITY TIME ------------------------------------------------------\r\n            \r\n            displayInactivity = false;\r\n\r\n            if (stateTrackerRef.current.curr_state ===stateTrackerRef.current.prev_state) {\r\n              endTime = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME +=endTime - stateTrackerRef.current.start_inactive_time;\r\n              stateTrackerRef.current.start_inactive_time = endTime;\r\n\r\n              if (stateTrackerRef.INACTIVE_TIME >= currentThresholds.INACTIVE_THRESH) {\r\n                displayInactivity = true;\r\n              }\r\n            } \r\n            else {\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            }\r\n\r\n             // Geri bildirim metin koordinatlarını belirle\r\n             const shoulderTextCoordX = flipFrameRef.current ? frameWidth - selectedSideFeatures.shoulder.x + 10 : selectedSideFeatures.shoulder.x + 10;\r\n             const elbowTextCoordX = flipFrameRef.current ? frameWidth - selectedSideFeatures.elbow.x + 15 : selectedSideFeatures.elbow.x + 15;\r\n             const wristTextCoordX = flipFrameRef.current ? frameWidth - selectedSideFeatures.wrist.x + 10 : selectedSideFeatures.wrist.x + 10;\r\n            \r\n\r\n             if (stateTrackerRef.current.state_seq.includes(\"s3\") || currState === \"s1\") {\r\n              stateTrackerRef.current.INCORRECT_POSTURE = false; // Yanlış postür bayrağını sıfırla\r\n            }\r\n\r\n            // Geri bildirim gösterim sayacını artır\r\n            stateTrackerRef.current.DISPLAY_TEXT.forEach((displayText, index) => {\r\n              if (displayText) {\r\n                stateTrackerRef.current.COUNT_FRAMES[index] += 1; // İlgili geri bildirim için kare sayısını artır\r\n              }\r\n            });\r\n\r\n            // Geri bildirimleri göster\r\n            showFeedback(ctx);\r\n\r\n            if (displayInactivity) {\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            }\r\n\r\n            // Dirsek açısını çiz\r\n            drawText(ctx,` ${elbow_vertical_angle.toFixed(2)}`,elbowTextCoordX,selectedSideFeatures.elbow.y + 10,{\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Omuz açısını çiz\r\n            drawText(ctx,`${shoulder_vertical_angle.toFixed(2)}`,shoulderTextCoordX,selectedSideFeatures.shoulder.y + 10,{\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Bilek açısını çiz\r\n            drawText(ctx,`${wrist_vertical_angle.toFixed(2)}`,wristTextCoordX,selectedSideFeatures.wrist.y + 10,{\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Doğru Triceps Extension Sayısını Göster\r\n            drawText(ctx,`CORRECT: ${stateTrackerRef.current.LATERAL_RAISE_COUNT}`,frameWidth * 0.68,30,{\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(18, 185, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Yanlış Triceps Extension Sayısını Göster\r\n            drawText(ctx,`INCORRECT: ${stateTrackerRef.current.IMPROPER_RAISE}`,frameWidth * 0.68,80,{\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(221, 0, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Resetting Display Text and Count Frames\r\n            stateTrackerRef.current.DISPLAY_TEXT.forEach((_, index) => {\r\n              if (\r\n                stateTrackerRef.current.COUNT_FRAMES[index] >\r\n                currentThresholds.CNT_FRAME_THRESH\r\n              ) {\r\n                stateTrackerRef.current.DISPLAY_TEXT[index] = false;\r\n                stateTrackerRef.current.COUNT_FRAMES[index] = 0;\r\n              }\r\n            });\r\n\r\n            stateTrackerRef.current.prev_state = currState;\r\n          }\r\n           \r\n        }\r\n        else{\r\n          if (flipFrameRef.current) {\r\n            ctx.translate(canvas.width, 0);\r\n            ctx.scale(-1, 1);\r\n            ctx.drawImage(webcamRef.current.video,0,0,canvas.width,canvas.height);\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transformation to default after flipping\r\n          }\r\n\r\n          const endTime = Date.now();\r\n          stateTrackerRef.current.INACTIVE_TIME += endTime - stateTrackerRef.current.start_inactive_time;\r\n\r\n          let displayInactivity = false;\r\n\r\n          if (stateTrackerRef.current.INACTIVE_TIME >=currentThresholds.INACTIVE_THRESH) {\r\n            displayInactivity = true;\r\n          }\r\n\r\n          stateTrackerRef.current.start_inactive_time = endTime;\r\n\r\n          drawText(ctx,`CORRECT: ${stateTrackerRef.current.LATERAL_RAISE_COUNT}`,frameWidth * 0.68,30,{\r\n            textColor: \"rgb(255, 255, 230)\",\r\n            backgroundColor: \"rgb(18, 185, 0)\",\r\n            fontSize: \"14px\",\r\n            }\r\n          );\r\n\r\n          drawText(ctx,`INCORRECT: ${stateTrackerRef.current.IMPROPER_RAISE}`,frameWidth * 0.68,80,{\r\n            textColor: \"rgb(255, 255, 230)\",\r\n            backgroundColor: \"rgb(221, 0, 0)\",\r\n            fontSize: \"14px\",\r\n          }\r\n        );\r\n\r\n        if (displayInactivity) {\r\n          stateTrackerRef.current.start_inactive_time = Date.now();\r\n          stateTrackerRef.current.INACTIVE_TIME = 0;\r\n        }\r\n\r\n          // Reset all other state variables\r\n          stateTrackerRef.current.prev_state = null;\r\n          stateTrackerRef.current.curr_state = null;\r\n          stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n          stateTrackerRef.current.INCORRECT_POSTURE = false;\r\n          stateTrackerRef.current.DISPLAY_TEXT = Array(5).fill(false);\r\n          // stateTrackerRef.current.COUNT_FRAMES = Array(5).fill(0);\r\n          stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n        }\r\n      }\r\n    },\r\n    [webcamRef, canvasRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const pose = new Pose({\r\n      locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,\r\n    });\r\n\r\n    pose.setOptions({\r\n      modelComplexity: 1,\r\n      smoothLandmarks: true,\r\n      enableSegmentation: false,\r\n      smoothSegmentation: false,\r\n      minDetectionConfidence: 0.5,\r\n      minTrackingConfidence: 0.5,\r\n    });\r\n\r\n    let camera;\r\n\r\n    const startCamera = () => {\r\n      if (webcamRef.current && webcamRef.current.video) {\r\n        camera = new cam.Camera(webcamRef.current.video, {\r\n          onFrame: async () => {\r\n            if (webcamRef.current && webcamRef.current.video) {\r\n              // Additional check to prevent accessing video of null\r\n              await pose.send({ image: webcamRef.current.video });\r\n            }\r\n          },\r\n          width: 640,\r\n          height: 480,\r\n        });\r\n        camera.start();\r\n      }\r\n    };\r\n    \r\n\r\n    pose.onResults(onResults);\r\n    startCamera();\r\n\r\n    return () => {\r\n      if (camera) {\r\n        camera.stop();\r\n      }\r\n      if (webcamRef.current &&webcamRef.current.video && webcamRef.current.video.srcObject) {\r\n        const tracks = webcamRef.current.video.srcObject.getTracks();\r\n        tracks.forEach((track) => track.stop());\r\n      }\r\n      pose.close();\r\n    };\r\n  }, [onResults]); // Notice how we use the onResults function within the dependencies list.\r\n\r\n   // Function to handle mode change\r\n    const handleModeChange = (event) => {\r\n      const isBeginner = event.target.value === \"beginner\";\r\n      setIsBeginnerMode(isBeginner);\r\n      const newThresholds = isBeginner ? thresholdsLateralRaiseBeginner : thresholdsLateralRaisePro;\r\n      setCurrentThresholds(newThresholds);\r\n      console.log(\"Current Thresholds:\", newThresholds);\r\n    };\r\n\r\n return (\r\n     <>\r\n     <div className=\"card\">\r\n       <div className=\"card-body\">\r\n         {/* İlk satır: Video ve Bilgilendirme Alanı */}\r\n         <div className=\"row\">\r\n           <div className=\"col-md-6 col-sm-12 text-center mb-3\">\r\n             <p>Video Alanı</p>\r\n           </div>\r\n           <div className=\"col-md-6 col-sm-12 text-center mb-3\">\r\n             <p>Bilgilendirme Alanı</p>\r\n           </div>\r\n         </div>\r\n \r\n         {/* İkinci satır: Webcam ve Seçim Alanı */}\r\n         <div className=\"row\">\r\n           <div className=\"col-md-6 col-sm-12 mb-3\">\r\n             <Webcam ref={webcamRef} style={{ display: \"none\" }} />\r\n             <canvas\r\n               ref={canvasRef}\r\n               className=\"h-full w-full object-contain\"\r\n               style={{\r\n                 maxWidth: \"100%\",\r\n                 maxHeight: \"100%\",\r\n                 position: \"relative\",\r\n                 left: 0,\r\n                 top: 0,\r\n               }}\r\n             />\r\n           </div>\r\n \r\n           <div className=\"col-md-6 col-sm-12\">\r\n              <select\r\n                className=\"form-select\"\r\n                aria-label=\"Default select example\"\r\n                onChange={handleModeChange}\r\n                value={isBeginnerMode ? \"beginner\" : \"pro\"}\r\n              >\r\n                <option className=\"dropdown-item\" value=\"beginner\">\r\n                  Beginner Mode\r\n                </option>\r\n                <option className=\"dropdown-item\" value=\"pro\">\r\n                  Pro Mode\r\n                </option>\r\n              </select>\r\n              <table className=\"table mt-3\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Metric</th>\r\n                    <th scope=\"col\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Correct</td>\r\n                    <td>{stateTrackerRef.current.LATERAL_RAISE_COUNT}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Incorrect</td>\r\n                    <td>{stateTrackerRef.current.IMPROPER_RAISE}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n           </div>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </>\r\n   );\r\n}\r\n\r\nexport default LateralRaiseExercise;"],"names":["getLandmarkPosition","landmark","frameWidth","frameHeight","x","y","getLandmarkFeatures","poseLandmarks","feature","dictFeatures","nose","left","shoulder","elbow","wrist","hip","knee","ankle","foot","right","featureSet","Error","magnitude","v","Math","sqrt","findAngle","p1","p2","refPt","arguments","length","undefined","p1Ref","p2Ref","cosTheta","v1","v2","dot","theta","acos","max","min","round","PI","drawText","ctx","msg","options","boxWidth","textColor","backgroundColor","fontSize","fontFamily","paddingX","paddingY","font","textWidth","measureText","width","textHeight","parseInt","drawRoundedRect","height","radius","fillColor","fillStyle","beginPath","moveTo","arcTo","closePath","fill","fillText","drawCircle","position","color","arc","drawConnector","start","end","lineWidth","lineTo","strokeStyle","stroke","drawDottedLine","lineLength","numOfDots","floor","i","dotX","dotY","colors","blue","red","green","light_green","yellow","magenta","white","cyan","light_blue","thresholdsBicepsCurl","ANGLE_ELBOW","NORMAL","TRANS","PASS","ELBOW_THRESH","INACTIVE_THRESH","CNT_FRAME_THRESH","thresholdsSquatBeginner","ANGLE_HIP_KNEE_VERT","HIP_THRESH","ANKLE_THRESH","KNEE_THRESH","OFFSET_THRESH","thresholdsSquatPro","thresholdsCrunchBeginner","ANGLE_SHOULDER_HIP_VERT","NECK_THRESH","thresholdsCrunchPro","thresholdsTricepsExtensionBeginner","thresholdsTricepsExtensionPro","thresholdsLateralRaiseBeginner","ANGLE_SHOULDER","thresholdsLateralRaisePro","webcamRef","useRef","canvasRef","isBeginnerMode","setIsBeginnerMode","useState","flipFrameRef","currentThresholds","setCurrentThresholds","stateTrackerRef","state_seq","start_inactive_time","Date","now","start_inactive_time_front","INACTIVE_TIME","INACTIVE_TIME_FRONT","DISPLAY_TEXT","Array","COUNT_FRAMES","INCORRECT_POSTURE","prev_state","curr_state","LATERAL_RAISE_COUNT","IMPROPER_RAISE","FEEDBACK_ID_MAP","text","onResults","useCallback","results","current","canvas","getContext","video","videoWidth","videoHeight","drawImage","displayInactivity","endTime","noseCoord","leftFeatures","rightFeatures","offsetAngle","translate","scale","toFixed","selectedSideFeatures","multiplier","abs","shoulder_vertical_angle","verticalStart","verticalEnd","elbow_vertical_angle","wrist_vertical_angle","currState","shoulderBodyAngle","newState","updatedStateSeq","includes","filter","state","push","updateStateSequence","INCORRECT_TRICEPS","TRICEPS_COUNT","stateTracker","e","WRIST_THRESH","shoulderTextCoordX","elbowTextCoordX","wristTextCoordX","forEach","displayText","index","feedback","showFeedback","_","setTransform","useEffect","pose","Pose","locateFile","file","camera","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","cam","onFrame","async","send","image","stop","srcObject","getTracks","track","close","_jsx","_Fragment","children","className","_jsxs","Webcam","ref","style","display","maxWidth","maxHeight","top","onChange","event","isBeginner","target","value","newThresholds","console","log","scope"],"sourceRoot":""}
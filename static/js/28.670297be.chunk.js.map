{"version":3,"file":"static/js/28.670297be.chunk.js","mappings":"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","sources":["components/Exercises/TricepsExtension.jsx","components/Exercises/utils/helperUtils.js","components/Exercises/utils/thresholds.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Pose } from \"@mediapipe/pose\";\r\nimport * as cam from \"@mediapipe/camera_utils\";\r\nimport {thresholdsTricepsExtensionBeginner,thresholdsTricepsExtensionPro} from './utils/thresholds'\r\nimport {getLandmarkFeatures,colors,findAngle,drawText,drawCircle,drawConnector, drawDottedLine,\r\n} from \"./utils/helperUtils\";\r\nimport { sendResults } from \"../../api\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { toast } from \"react-toastify\"; // toast'ı ekleyin\r\nimport \"react-toastify/dist/ReactToastify.css\"; // toast css'i ekleyin\r\nimport { useNavigate } from \"react-router-dom\";\r\nfunction TricepsExtensionExercise() {\r\n\r\n  //webcam and canvas references\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const poseRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  const { user } = useAuth();\r\n\r\n  const [isBeginnerMode, setIsBeginnerMode] = useState(true);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [incorrectCount, setIncorrectCount] = useState(0);\r\n  const [isCameraActive, setIsCameraActive] = useState(false);\r\n  \r\n  const flipFrameRef = useRef(false);\r\n  const [currentThresholds, setCurrentThresholds] = useState(thresholdsTricepsExtensionBeginner);\r\n\r\n  const stateTrackerRef = useRef({\r\n    state_seq: [],\r\n    start_inactive_time: Date.now(),\r\n    start_inactive_time_front: Date.now(),\r\n    INACTIVE_TIME: 0,\r\n    INACTIVE_TIME_FRONT: 0.0,\r\n    DISPLAY_TEXT: Array(4).fill(false),\r\n    COUNT_FRAMES: Array(4).fill(0),\r\n    INCORRECT_POSTURE: false,\r\n    prev_state: null,// Önceki durum kaydediliyor\r\n    curr_state: null,\r\n    TRICEPS_COUNT: 0,\r\n    INCORRECT_TRICEPS: 0,\r\n  });\r\n\r\n  const handleModeChange = (event) => {\r\n    const isBeginner = event.target.value === \"beginner\";\r\n    setIsBeginnerMode(isBeginner);\r\n    const newThresholds = isBeginner ? thresholdsTricepsExtensionBeginner : thresholdsTricepsExtensionPro;\r\n    setCurrentThresholds(newThresholds);\r\n    console.log(\"Current Thresholds:\", newThresholds);\r\n  };\r\n\r\n  const sendResultsToBackend = async () => {\r\n    const userId = user?.id; // Aktif kullanıcı ID'sini alın\r\n    const exerciseId = 5; // Triceps Extension'ın veritabanındaki ID'si\r\n    const createdDate = new Date().toISOString(); // Oluşturulma tarihi\r\n\r\n    try {\r\n      const response = await sendResults({\r\n        userId,\r\n        exerciseId,\r\n        correct: correctCount,\r\n        incorrect: incorrectCount,\r\n        createdDate,\r\n      });\r\n      toast.success(`Kayıt işlemi başarıyla tamamlandı! ${response}`);\r\n    } catch (error) {\r\n      toast.error(`Sonuçlar gönderilirken bir hata oluştu: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const resetExercise = () => {\r\n    if (correctCount !== 0 || incorrectCount !== 0) {\r\n      sendResultsToBackend();\r\n    }\r\n\r\n    setCorrectCount(0);\r\n    setIncorrectCount(0);\r\n    stateTrackerRef.current.LATERAL_RAISE_COUNT = 0;\r\n    stateTrackerRef.current.IMPROPER_RAISE = 0;\r\n    // Reset other state variables if needed\r\n\r\n    // Close the pose instance and stop the camera\r\n    if (poseRef.current) {\r\n      poseRef.current.close();\r\n      poseRef.current = null;\r\n    }\r\n    if (cameraRef.current) {\r\n      cameraRef.current.stop();\r\n      cameraRef.current = null;\r\n    }\r\n    if (webcamRef.current && webcamRef.current.video && webcamRef.current.video.srcObject) {\r\n      const tracks = webcamRef.current.video.srcObject.getTracks();\r\n      tracks.forEach((track) => track.stop());\r\n      webcamRef.current.video.srcObject = null;\r\n    }\r\n    setIsCameraActive(false);\r\n\r\n    // Clear the canvas\r\n    if (canvasRef.current) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n    navigate('/profile');\r\n  };\r\n\r\n  const startExercise = () => {\r\n    setIsCameraActive(true);\r\n    startCamera();\r\n  };\r\n\r\n  const startCamera = () => {\r\n    if (webcamRef.current && webcamRef.current.video) {\r\n      cameraRef.current = new cam.Camera(webcamRef.current.video, {\r\n        onFrame: async () => {\r\n          if (webcamRef.current && webcamRef.current.video && poseRef.current) {\r\n            await poseRef.current.send({ image: webcamRef.current.video });\r\n          }\r\n        },\r\n        width: 640,\r\n        height: 480,\r\n      });\r\n      cameraRef.current.start();\r\n    }\r\n  };\r\n\r\n  const FEEDBACK_ID_MAP = {\r\n    0: { text: \"KEEP ELBOWS CLOSE TO HEAD\", position: 215, color: \"rgb(255,153,0)\" },\r\n    1: { text: \"FULLY EXTEND YOUR ARMS\", position: 170, color: \"rgb(0,153,255)\"},\r\n    2: { text: \"DO NOT FLARE ELBOWS\", position: 125,color: \"rgb(255,80,80)\"},\r\n    3: {text: \"RETURN TO START POSITION\", position: 80, color: \"rgb(255,0,0)\" },\r\n  };\r\n\r\n  const getState = (elbowAngle) => {\r\n    if (elbowAngle >= currentThresholds.ANGLE_ELBOW.NORMAL[0] && elbowAngle <= currentThresholds.ANGLE_ELBOW.NORMAL[1]) {\r\n      return \"s1\"; // Top position (25-30 derece)\r\n    } else if (elbowAngle >= currentThresholds.ANGLE_ELBOW.TRANS[0] && elbowAngle <= currentThresholds.ANGLE_ELBOW.TRANS[1]) {\r\n      return \"s2\"; // Transition (31-89 derece)\r\n    } else if (elbowAngle >= currentThresholds.ANGLE_ELBOW.PASS[0] && elbowAngle <= currentThresholds.ANGLE_ELBOW.PASS[1]) {\r\n      return \"s3\"; // Bottom position (90-120 derece)\r\n    }\r\n    return null;\r\n  };\r\n\r\n    const updateStateSequence = (newState) => {\r\n      let updatedStateSeq = [...stateTrackerRef.current.state_seq];\r\n  \r\n      if (newState === \"s2\") {\r\n        if ((!updatedStateSeq.includes(\"s3\") &&  updatedStateSeq.filter((state) => state === \"s2\").length === 0) || (updatedStateSeq.includes(\"s3\") && updatedStateSeq.filter((state) => state === \"s2\").length === 1)) {\r\n          updatedStateSeq.push(newState);\r\n        }\r\n      } else if (newState === \"s3\") {\r\n        if (!updatedStateSeq.includes(\"s3\") && updatedStateSeq.includes(\"s2\")) {\r\n          updatedStateSeq.push(newState);\r\n        }\r\n      }\r\n  \r\n      stateTrackerRef.current.state_seq = updatedStateSeq;\r\n    };\r\n\r\n    // This function now doesn't require parameters for stateTracker and FEEDBACK_ID_MAP\r\n    const showFeedback = (ctx) => {\r\n      // Access the current state using stateTrackerRef.current\r\n      const stateTracker = stateTrackerRef.current;\r\n\r\n      // Iterate over DISPLAY_TEXT to show feedback messages\r\n      stateTracker.DISPLAY_TEXT.forEach((displayText, index) => {\r\n        if (displayText) {\r\n          const feedback = FEEDBACK_ID_MAP[index];\r\n          if (feedback) {\r\n            drawText(ctx, feedback.text, 30, feedback.position, {\r\n              textColor: feedback.textColor || \"black\",\r\n              backgroundColor: feedback.backgroundColor || \"yellow\",\r\n              fontSize: \"16px\",\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      // Display a general incorrect posture message if applicable\r\n      if (stateTracker.INCORRECT_POSTURE) {\r\n        drawText(ctx, \"CORRECT YOUR POSTURE\", 30, 300, {\r\n          textColor: \"white\",\r\n          backgroundColor: \"red\",\r\n          fontSize: \"16px\",\r\n        });\r\n      }\r\n    };\r\n\r\n  const onResults = useCallback((results) => {\r\n      if (webcamRef.current && canvasRef.current) {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        canvas.width = webcamRef.current.video.videoWidth;\r\n        canvas.height = webcamRef.current.video.videoHeight;\r\n\r\n        const frameWidth = canvas.width;\r\n        const frameHeight = canvas.height;\r\n\r\n        ctx.drawImage(webcamRef.current.video, 0, 0, canvas.width, canvas.height);\r\n\r\n        let displayInactivity = false;\r\n        let endTime = Date.now();\r\n\r\n        if (results.poseLandmarks) {\r\n          // Calculate coordinates for each key landmark\r\n          const noseCoord = getLandmarkFeatures(results.poseLandmarks,\"nose\",frameWidth,frameHeight);\r\n          const leftFeatures = getLandmarkFeatures(results.poseLandmarks,\"left\",canvas.width,canvas.height);\r\n          const rightFeatures = getLandmarkFeatures(results.poseLandmarks,\"right\",canvas.width,canvas.height);\r\n\r\n          const offsetAngle = findAngle(leftFeatures.shoulder,rightFeatures.shoulder,noseCoord); //Kullanıcının omuz hizasının doğru olduğunu kontrol eder.\r\n\r\n          if (offsetAngle > currentThresholds.OFFSET_THRESH) {\r\n                displayInactivity = false;\r\n                endTime = Date.now(); // Equivalent to time.perf_counter()\r\n                stateTrackerRef.current.INACTIVE_TIME_FRONT += endTime - stateTrackerRef.current.start_inactive_time_front;\r\n                stateTrackerRef.current.start_inactive_time_front = endTime;\r\n\r\n                if (stateTrackerRef.current.INACTIVE_TIME_FRONT >= currentThresholds.INACTIVE_THRESH) {\r\n                  displayInactivity = true; //Kullanıcı uzun süre inaktif veya yanlış pozisyonda.\r\n                }  \r\n\r\n                // Burun, sol ve sağ omuz noktaları, belirgin renklerle çizilir.\r\n                drawCircle(ctx, noseCoord, 7, colors.white);\r\n                drawCircle(ctx, leftFeatures.shoulder, 7, colors.yellow);\r\n                drawCircle(ctx, rightFeatures.shoulder, 7, colors.magenta);\r\n\r\n\r\n                // Bu kod parçası, kullanıcının kamera görüntüsünü gerektiğinde yatay olarak ters çevirmek (flip) için kullanılır. \r\n                if (flipFrameRef.current) {\r\n                  ctx.translate(canvas.width, 0);\r\n                  ctx.scale(-1, 1);\r\n                  ctx.translate(-canvas.width, 0); // Translate back after flipping\r\n                }\r\n\r\n                if (displayInactivity) {\r\n                  // Bu kod, kullanıcı inaktif (hareketsiz veya yanlış pozisyonda) olarak algılandığında sayaçları ve zamanlayıcıyı sıfırlamak için kullanılır. \r\n                  stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n                  stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n                }\r\n\r\n                drawText(ctx,`CORRECT: ${stateTrackerRef.current.TRICEPS_COUNT}`,frameWidth * 0.68,30,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(18, 185, 0)\",\r\n                  fontSize: \"14px\", // Adjusted for typical browser scaling; you may need to tweak this\r\n                }\r\n              );\r\n              drawText(ctx,`INCORRECT: ${stateTrackerRef.current.INCORRECT_TRICEPS}`,frameWidth * 0.68,80,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(221, 0, 0)\",\r\n                  fontSize: \"14px\",\r\n                }\r\n              );\r\n              drawText(ctx,\"CAMERA NOT ALIGNED PROPERLY!!!\",30,frameHeight - 60,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(255, 153, 0)\",\r\n                  fontSize: \"14px\",\r\n                }\r\n              );\r\n              drawText(ctx,`OFFSET ANGLE: ${offsetAngle.toFixed(2)}`,30,frameHeight - 30,{\r\n                  textColor: \"rgb(255, 255, 230)\",\r\n                  backgroundColor: \"rgb(255, 153, 0)\",\r\n                  fontSize: \"14px\",\r\n                }\r\n              );\r\n\r\n              // Reset inactive times for side view\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n              stateTrackerRef.current.prev_state = null;\r\n              stateTrackerRef.current.curr_state = null;\r\n          }\r\n          else{ // Kamera hizası doğru ise yapılacaklar\r\n            stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n            stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n\r\n            // Kullanıcının analiz edilecek tarafını (sol veya sağ) belirlemek\r\n            const distLShHip = Math.abs(leftFeatures.foot.y - leftFeatures.shoulder.y);\r\n            const distRShHip = Math.abs(rightFeatures.foot.y - rightFeatures.shoulder.y);\r\n\r\n            let selectedSideFeatures = null;\r\n            let multiplier = 0;\r\n\r\n            if (distLShHip > distRShHip) {\r\n              selectedSideFeatures = leftFeatures;\r\n              multiplier = -1;\r\n            } else {\r\n              selectedSideFeatures = rightFeatures;\r\n              multiplier = 1;\r\n            }\r\n\r\n          // Omuz dikey açısını hesaplamak\r\n          const shoulder_vertical_angle = findAngle(selectedSideFeatures.hip,{ x: selectedSideFeatures.shoulder.x, y: 0 },selectedSideFeatures.shoulder);\r\n          drawCircle(ctx, selectedSideFeatures.shoulder, 15, colors.white); // Omuz noktasını beyaz bir daire ile işaretler\r\n          let verticalStart = { x: selectedSideFeatures.shoulder.x, y: selectedSideFeatures.shoulder.y - 80 };\r\n          let verticalEnd = { x: selectedSideFeatures.shoulder.x, y: selectedSideFeatures.shoulder.y + 20 };\r\n          drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); // Omuz hizasını göstermek için mavi kesikli bir çizgi çizer\r\n\r\n          // Dirsek dikey açısını hesaplamak\r\n          const elbow_vertical_angle = findAngle(selectedSideFeatures.shoulder,{ x: selectedSideFeatures.elbow.x, y: 0 },selectedSideFeatures.elbow);\r\n          drawCircle(ctx, selectedSideFeatures.elbow, 10, colors.white); // Dirsek noktasını beyaz bir daire ile işaretler\r\n          verticalStart = { x: selectedSideFeatures.elbow.x, y: selectedSideFeatures.elbow.y - 50 };\r\n          verticalEnd = { x: selectedSideFeatures.elbow.x, y: selectedSideFeatures.elbow.y + 20 };\r\n          drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); // Dirsek hizasını göstermek için mavi kesikli bir çizgi çizer\r\n\r\n          // Bilek dikey açısını hesaplamak\r\n          const wrist_vertical_angle = findAngle(selectedSideFeatures.elbow,{ x: selectedSideFeatures.wrist.x, y: 0 },selectedSideFeatures.wrist);\r\n          drawCircle(ctx, selectedSideFeatures.wrist, 15, colors.white); // Bilek noktasını beyaz bir daire ile işaretler\r\n          verticalStart = { x: selectedSideFeatures.wrist.x, y: selectedSideFeatures.wrist.y - 50 };\r\n          verticalEnd = { x: selectedSideFeatures.wrist.x, y: selectedSideFeatures.wrist.y + 20 };\r\n          drawDottedLine(ctx, verticalStart, verticalEnd, colors.blue); // Bilek hizasını göstermek için mavi kesikli bir çizgi çizer\r\n\r\n          // Landmarkları birleştirme\r\n          drawConnector(ctx, selectedSideFeatures.shoulder, selectedSideFeatures.elbow, colors.light_blue, 4);\r\n          drawConnector(ctx, selectedSideFeatures.elbow, selectedSideFeatures.wrist, colors.light_blue, 4);\r\n\r\n          // Kritik landmarkları işaretleme\r\n          drawCircle(ctx, selectedSideFeatures.shoulder, 7, colors.yellow);\r\n          drawCircle(ctx, selectedSideFeatures.elbow, 7, colors.yellow);\r\n          drawCircle(ctx, selectedSideFeatures.wrist, 7, colors.yellow);\r\n\r\n          // Hareket durumunu güncelleme\r\n          const currState = getState(elbow_vertical_angle);\r\n          stateTrackerRef.current.curr_state = currState;\r\n          updateStateSequence(currState);\r\n\r\n          // ------------- COMPUTE COUNTERS ------------------\r\n          const { state_seq, INCORRECT_POSTURE } = stateTrackerRef.current;\r\n\r\n            if (currState === \"s1\") {\r\n              if (state_seq.length === 3 && !INCORRECT_POSTURE) {\r\n                stateTrackerRef.current.TRICEPS_COUNT += 1;\r\n                setCorrectCount(stateTrackerRef.current.TRICEPS_COUNT);\r\n              } else if (state_seq.includes(\"s2\") && state_seq.length === 1) {\r\n                stateTrackerRef.current.INCORRECT_TRICEPS += 1;\r\n                setIncorrectCount(stateTrackerRef.current.INCORRECT_TRICEPS);\r\n              } else if (INCORRECT_POSTURE) {\r\n                stateTrackerRef.current.INCORRECT_TRICEPS += 1;\r\n                setIncorrectCount(stateTrackerRef.current.INCORRECT_TRICEPS);\r\n              }\r\n\r\n              stateTrackerRef.current.state_seq = [];\r\n              stateTrackerRef.current.INCORRECT_POSTURE = false;\r\n            }\r\n            else{\r\n                const stateTracker = stateTrackerRef.current;\r\n\r\n                // Dirsek açısını kontrol et\r\n                if (elbow_vertical_angle > currentThresholds.ANGLE_ELBOW.PASS[1]) {\r\n                  stateTracker.DISPLAY_TEXT[0] = true; // \"FULLY EXTEND YOUR ARMS\" geri bildirimi\r\n                } else if (\r\n                  elbow_vertical_angle < currentThresholds.ANGLE_ELBOW.NORMAL[0] && stateTracker.state_seq.filter((e) => e === \"s2\").length === 1) {\r\n                  stateTracker.DISPLAY_TEXT[1] = true; // \"RETURN TO START POSITION\" geri bildirimi\r\n                }\r\n\r\n                // Omuz hizasını kontrol et\r\n                if (\r\n                  Math.abs(selectedSideFeatures.shoulder.x - selectedSideFeatures.elbow.x) >\r\n                  currentThresholds.OFFSET_THRESH\r\n                ) {\r\n                  stateTracker.DISPLAY_TEXT[2] = true; // \"KEEP ELBOWS CLOSE TO HEAD\" geri bildirimi\r\n                  stateTracker.INCORRECT_POSTURE = true;\r\n                }\r\n\r\n                // Kolların doğru hizalanmasını kontrol et\r\n                if (\r\n                  Math.abs(selectedSideFeatures.wrist.y - selectedSideFeatures.elbow.y) <\r\n                  currentThresholds.WRIST_THRESH\r\n                ) {\r\n                  stateTracker.DISPLAY_TEXT[3] = true; // \"DO NOT FLARE ELBOWS\" geri bildirimi\r\n                  stateTracker.INCORRECT_POSTURE = true;\r\n                }\r\n            }\r\n            \r\n            // --------------------- COMPUTE INACTIVITY TIME ------------------------------------------------------\r\n            \r\n            displayInactivity = false;\r\n\r\n            if (stateTrackerRef.current.curr_state ===stateTrackerRef.current.prev_state) {\r\n              endTime = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME +=endTime - stateTrackerRef.current.start_inactive_time;\r\n              stateTrackerRef.current.start_inactive_time = endTime;\r\n\r\n              if (stateTrackerRef.INACTIVE_TIME >= currentThresholds.INACTIVE_THRESH) {\r\n                displayInactivity = true;\r\n              }\r\n            } \r\n            else {\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            }\r\n\r\n            // Geri bildirim metin koordinatlarını belirle\r\n            const shoulderTextCoordX = flipFrameRef.current ? frameWidth - selectedSideFeatures.shoulder.x + 10 : selectedSideFeatures.shoulder.x + 10;\r\n            const elbowTextCoordX = flipFrameRef.current ? frameWidth - selectedSideFeatures.elbow.x + 15 : selectedSideFeatures.elbow.x + 15;\r\n            const wristTextCoordX = flipFrameRef.current ? frameWidth - selectedSideFeatures.wrist.x + 10 : selectedSideFeatures.wrist.x + 10;\r\n\r\n            // Triceps Extension için durum sıralaması kontrolü\r\n            if (stateTrackerRef.current.state_seq.includes(\"s3\") || currState === \"s1\") {\r\n              stateTrackerRef.current.INCORRECT_POSTURE = false; // Yanlış postür bayrağını sıfırla\r\n            }\r\n\r\n            // Geri bildirim gösterim sayacını artır\r\n            stateTrackerRef.current.DISPLAY_TEXT.forEach((displayText, index) => {\r\n              if (displayText) {\r\n                stateTrackerRef.current.COUNT_FRAMES[index] += 1; // İlgili geri bildirim için kare sayısını artır\r\n              }\r\n            });\r\n\r\n            // Geri bildirimleri göster\r\n            showFeedback(ctx);\r\n\r\n            if (displayInactivity) {\r\n              stateTrackerRef.current.start_inactive_time = Date.now();\r\n              stateTrackerRef.current.INACTIVE_TIME = 0;\r\n            }\r\n\r\n            // Dirsek açısını çiz\r\n            drawText(ctx,` ${elbow_vertical_angle.toFixed(2)}`,elbowTextCoordX,selectedSideFeatures.elbow.y + 10,{\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Omuz açısını çiz\r\n            drawText(ctx,`${shoulder_vertical_angle.toFixed(2)}`,shoulderTextCoordX,selectedSideFeatures.shoulder.y + 10,{\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Bilek açısını çiz\r\n            drawText(ctx,`${wrist_vertical_angle.toFixed(2)}`,wristTextCoordX,selectedSideFeatures.wrist.y + 10,{\r\n                textColor: colors.light_green,\r\n                fontSize: \"16px\",\r\n              }\r\n            );\r\n\r\n            // Doğru Triceps Extension Sayısını Göster\r\n            drawText(ctx,`CORRECT: ${stateTrackerRef.current.TRICEPS_COUNT}`,frameWidth * 0.68,30,{\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(18, 185, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Yanlış Triceps Extension Sayısını Göster\r\n            drawText(ctx,`INCORRECT: ${stateTrackerRef.current.INCORRECT_TRICEPS}`,frameWidth * 0.68,80,{\r\n                textColor: \"rgb(255, 255, 230)\",\r\n                backgroundColor: \"rgb(221, 0, 0)\",\r\n                fontSize: \"14px\",\r\n              }\r\n            );\r\n\r\n            // Resetting Display Text and Count Frames\r\n            stateTrackerRef.current.DISPLAY_TEXT.forEach((_, index) => {\r\n              if (\r\n                stateTrackerRef.current.COUNT_FRAMES[index] >\r\n                currentThresholds.CNT_FRAME_THRESH\r\n              ) {\r\n                stateTrackerRef.current.DISPLAY_TEXT[index] = false;\r\n                stateTrackerRef.current.COUNT_FRAMES[index] = 0;\r\n              }\r\n            });\r\n\r\n            stateTrackerRef.current.prev_state = currState;\r\n          }\r\n        }\r\n        else{\r\n          if (flipFrameRef.current) {\r\n            ctx.translate(canvas.width, 0);\r\n            ctx.scale(-1, 1);\r\n            ctx.drawImage(webcamRef.current.video,0,0,canvas.width,canvas.height);\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transformation to default after flipping\r\n          }\r\n\r\n          const endTime = Date.now();\r\n          stateTrackerRef.current.INACTIVE_TIME += endTime - stateTrackerRef.current.start_inactive_time;\r\n\r\n          let displayInactivity = false;\r\n\r\n          if (stateTrackerRef.current.INACTIVE_TIME >=currentThresholds.INACTIVE_THRESH) {\r\n            displayInactivity = true;\r\n          }\r\n\r\n          stateTrackerRef.current.start_inactive_time = endTime;\r\n\r\n          drawText(ctx,`CORRECT: ${stateTrackerRef.current.TRICEPS_COUNT}`,frameWidth * 0.68,30,{\r\n            textColor: \"rgb(255, 255, 230)\",\r\n            backgroundColor: \"rgb(18, 185, 0)\",\r\n            fontSize: \"14px\",\r\n           }\r\n          );\r\n\r\n          drawText(ctx,`INCORRECT: ${stateTrackerRef.current.INCORRECT_TRICEPS}`,frameWidth * 0.68,80,{\r\n            textColor: \"rgb(255, 255, 230)\",\r\n            backgroundColor: \"rgb(221, 0, 0)\",\r\n            fontSize: \"14px\",\r\n          }\r\n        );\r\n\r\n        if (displayInactivity) {\r\n          stateTrackerRef.current.start_inactive_time = Date.now();\r\n          stateTrackerRef.current.INACTIVE_TIME = 0;\r\n        }\r\n\r\n          // Reset all other state variables\r\n          stateTrackerRef.current.prev_state = null;\r\n          stateTrackerRef.current.curr_state = null;\r\n          stateTrackerRef.current.INACTIVE_TIME_FRONT = 0;\r\n          stateTrackerRef.current.INCORRECT_POSTURE = false;\r\n          stateTrackerRef.current.DISPLAY_TEXT = Array(5).fill(false);\r\n          // stateTrackerRef.current.COUNT_FRAMES = Array(5).fill(0);\r\n          stateTrackerRef.current.start_inactive_time_front = Date.now();\r\n        }\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    const pose = new Pose({\r\n    locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,\r\n  });\r\n\r\n  pose.setOptions({\r\n    modelComplexity: 1,\r\n    smoothLandmarks: true,\r\n    enableSegmentation: false,\r\n    smoothSegmentation: false,\r\n    minDetectionConfidence: 0.5,\r\n    minTrackingConfidence: 0.5,\r\n  });\r\n\r\n  poseRef.current = pose;\r\n\r\n  pose.onResults(onResults);\r\n\r\n  return () => {\r\n    if (poseRef.current) {\r\n      poseRef.current.close();\r\n      poseRef.current = null;\r\n    }\r\n    if (cameraRef.current) {\r\n      cameraRef.current.stop();\r\n      cameraRef.current = null;\r\n    }\r\n    if (webcamRef.current && webcamRef.current.video && webcamRef.current.video.srcObject) {\r\n      const tracks = webcamRef.current.video.srcObject.getTracks();\r\n      tracks.forEach((track) => track.stop());\r\n      webcamRef.current.video.srcObject = null;\r\n    }\r\n  };\r\n}, [onResults]); // Notice how we use the onResults function within the dependencies list.\r\n\r\n   \r\n\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 col-sm-12 text-center mb-3\">\r\n              <p>Video Alanı</p>\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12 text-center mb-3\">\r\n              <p>Bilgilendirme Alanı</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 col-sm-12 mb-3\">\r\n              <Webcam ref={webcamRef} style={{ display: \"none\" }} />\r\n              <canvas\r\n                ref={canvasRef}\r\n                className=\"h-full w-full object-contain\"\r\n                style={{\r\n                  maxWidth: \"100%\",\r\n                  maxHeight: \"100%\",\r\n                  position: \"relative\",\r\n                  left: 0,\r\n                  top: 0,\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6 col-sm-12\">\r\n              <select\r\n                className=\"form-select\"\r\n                aria-label=\"Default select example\"\r\n                onChange={handleModeChange}\r\n                value={isBeginnerMode ? \"beginner\" : \"pro\"}\r\n              >\r\n                <option className=\"dropdown-item\" value=\"beginner\">\r\n                  Beginner Mode\r\n                </option>\r\n                <option className=\"dropdown-item\" value=\"pro\">\r\n                  Pro Mode\r\n                </option>\r\n              </select>\r\n              <table className=\"table mt-3\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Metric</th>\r\n                    <th scope=\"col\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Correct</td>\r\n                    <td>{correctCount}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Incorrect</td>\r\n                    <td>{incorrectCount}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n              <button className=\"btn btn-success mt-3\" onClick={startExercise}>Start Sport</button>\r\n              <button className=\"btn btn-danger mt-3 ms-2\" onClick={resetExercise}>Finish Sport</button>\r\n           </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TricepsExtensionExercise;","// General utility functions\r\n\r\nexport const getLandmarkPosition = (landmark, frameWidth, frameHeight) => ({\r\n  x: landmark.x * frameWidth,\r\n  y: landmark.y * frameHeight,\r\n});\r\n\r\nexport const getLandmarkFeatures = (poseLandmarks,feature,frameWidth,frameHeight) => {\r\n  const dictFeatures = {\r\n    nose: 0,\r\n    left: {\r\n      shoulder: 11,\r\n      elbow: 13,\r\n      wrist: 15,\r\n      hip: 23,\r\n      knee: 25,\r\n      ankle: 27,\r\n      foot: 31,\r\n    },\r\n    right: {\r\n      shoulder: 12,\r\n      elbow: 14,\r\n      wrist: 16,\r\n      hip: 24,\r\n      knee: 26,\r\n      ankle: 28,\r\n      foot: 32,\r\n    },\r\n  };\r\n\r\n  if (feature === \"nose\") {\r\n    return getLandmarkPosition(\r\n      poseLandmarks[dictFeatures.nose],\r\n      frameWidth,\r\n      frameHeight\r\n    );\r\n  } else if (feature === \"left\" || feature === \"right\") {\r\n    const featureSet = dictFeatures[feature];\r\n    return {\r\n      shoulder: getLandmarkPosition(\r\n        poseLandmarks[featureSet.shoulder],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      elbow: getLandmarkPosition(\r\n        poseLandmarks[featureSet.elbow],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      wrist: getLandmarkPosition(\r\n        poseLandmarks[featureSet.wrist],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      hip: getLandmarkPosition(\r\n        poseLandmarks[featureSet.hip],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      knee: getLandmarkPosition(\r\n        poseLandmarks[featureSet.knee],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      ankle: getLandmarkPosition(\r\n        poseLandmarks[featureSet.ankle],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n      foot: getLandmarkPosition(\r\n        poseLandmarks[featureSet.foot],\r\n        frameWidth,\r\n        frameHeight\r\n      ),\r\n    };\r\n  } else {\r\n    throw new Error(\"Feature must be 'nose', 'left', or 'right'.\");\r\n  }\r\n};\r\n\r\nexport const dot = (v1, v2) => v1.x * v2.x + v1.y * v2.y;\r\n\r\nexport const magnitude = (v) => Math.sqrt(v.x * v.x + v.y * v.y);\r\n\r\nexport const findAngle = (p1, p2, refPt = { x: 0, y: 0 }) => {\r\n  const p1Ref = { x: p1.x - refPt.x, y: p1.y - refPt.y };\r\n  const p2Ref = { x: p2.x - refPt.x, y: p2.y - refPt.y };\r\n\r\n  const cosTheta = dot(p1Ref, p2Ref) / (magnitude(p1Ref) * magnitude(p2Ref));\r\n  const theta = Math.acos(Math.max(Math.min(cosTheta, 1.0), -1.0));\r\n  return Math.round(theta * (180 / Math.PI));\r\n};\r\n\r\nexport const drawRoundedRect = (\r\n  ctx,\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  radius,\r\n  fillColor\r\n) => {\r\n  ctx.fillStyle = fillColor;\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.arcTo(x + width, y, x + width, y + height, radius);\r\n  ctx.arcTo(x + width, y + height, x, y + height, radius);\r\n  ctx.arcTo(x, y + height, x, y, radius);\r\n  ctx.arcTo(x, y, x + width, y, radius);\r\n  ctx.closePath();\r\n  ctx.fill();\r\n};\r\n\r\nexport const drawText = (ctx, msg, x, y, options = {}) => {\r\n  const {\r\n    boxWidth = 8,\r\n    textColor = \"rgb(0, 255, 0)\",\r\n    backgroundColor = \"rgb(0, 0, 0)\",\r\n    fontSize = \"16px\",\r\n    fontFamily = \"Arial\",\r\n    paddingX = 20,\r\n    paddingY = 10,\r\n  } = options;\r\n\r\n  ctx.font = `${fontSize} ${fontFamily}`;\r\n  const textMetrics = ctx.measureText(msg);\r\n  const textWidth = textMetrics.width;\r\n  const textHeight = parseInt(fontSize, 10);\r\n\r\n  const rectStartX = x - paddingX;\r\n  const rectStartY = y - textHeight - paddingY;\r\n  const rectWidth = textWidth + 2 * paddingX;\r\n  const rectHeight = textHeight + 2 * paddingY;\r\n\r\n  drawRoundedRect(\r\n    ctx,\r\n    rectStartX,\r\n    rectStartY,\r\n    rectWidth,\r\n    rectHeight,\r\n    boxWidth,\r\n    backgroundColor\r\n  );\r\n  ctx.fillStyle = textColor;\r\n  ctx.fillText(msg, x, y + paddingY / 2);\r\n};\r\n\r\nexport const drawCircle = (ctx, position, radius, color) => {\r\n  ctx.beginPath();\r\n  ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n};\r\n\r\nexport const drawConnector = (ctx, start, end, color, lineWidth) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(start.x, start.y);\r\n  ctx.lineTo(end.x, end.y);\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.stroke();\r\n};\r\n\r\nexport const drawDottedLine = (ctx, start, end, color) => {\r\n  const lineLength = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\r\n  const dotSpacing = 5;\r\n  const numOfDots = Math.floor(lineLength / dotSpacing);\r\n\r\n  for (let i = 0; i < numOfDots; i++) {\r\n    const dotX = start.x + ((end.x - start.x) / numOfDots) * i;\r\n    const dotY = start.y + ((end.y - start.y) / numOfDots) * i;\r\n    ctx.beginPath();\r\n    ctx.arc(dotX, dotY, 1, 0, 2 * Math.PI);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  }\r\n};\r\n\r\nexport const colors = {\r\n  blue: 'rgb(0,127,255)',\r\n  red: 'rgb(255,50,50)',\r\n  green: 'rgb(0,255,127)',\r\n  light_green: 'rgb(100,233,127)',\r\n  yellow: 'rgb(255,255,0)',\r\n  magenta: 'rgb(255,0,255)',\r\n  white: 'rgb(255,255,255)',\r\n  cyan: 'rgb(0,255,255)',\r\n  light_blue: 'rgb(102,204,255)'\r\n};","// BICEPS CURL\r\nexport const thresholdsBicepsCurl = {\r\n    ANGLE_ELBOW: {\r\n      NORMAL: [0, 20],  // Kol tamamen açık (dinlenme durumu)\r\n      TRANS: [21, 70],  // Kol kısmen bükülmüş (geçiş durumu)\r\n      PASS: [71, 140]   // Kol tamamen bükülmüş (tam biceps curl)\r\n    },\r\n    ELBOW_THRESH: [10, 140],  // Minimum ve maksimum bükülme açısı\r\n    INACTIVE_THRESH: 10.0,    // Hareketin inaktif olabileceği maksimum süre (saniye)\r\n    CNT_FRAME_THRESH: 30      // Geri bildirim için gereken minimum kare sayısı\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n//\r\nexport const thresholdsSquatBeginner = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [70, 95]\r\n  },\r\n  HIP_THRESH: [10, 50],\r\n  ANKLE_THRESH: 45,\r\n  KNEE_THRESH: [50, 70, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\nexport const thresholdsSquatPro = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [80, 95]\r\n  },\r\n  HIP_THRESH: [15, 50],\r\n  ANKLE_THRESH: 30,\r\n  KNEE_THRESH: [50, 80, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\nexport const thresholdsCrunchBeginner = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [30, 60], // Doğru crunch açısı\r\n      TRANS: [61, 75],  // Geçiş açısı\r\n      PASS: [76, 90],   // Maksimum kabul edilebilir açılar\r\n  },\r\n  HIP_THRESH: [0, 10], // Kalça kalkış açısı\r\n  NECK_THRESH: [10, 30], // Boyun doğal pozisyon açısı\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50 // Geri bildirim süresi\r\n};\r\n\r\nexport const thresholdsCrunchPro = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [35, 55],\r\n      TRANS: [56, 70],\r\n      PASS: [71, 85],\r\n  },\r\n  HIP_THRESH: [0, 5],\r\n  NECK_THRESH: [5, 20],\r\n  INACTIVE_THRESH: 8.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\n\r\n/*-------------------------------SHOULDER PRESS----------------------------------- */\r\nexport const thresholdsShoulderPress = {\r\n  ANGLE_SHOULDER_ELBOW: {\r\n      NORMAL: [160, 180], // Kollar yukarıda, doğru pozisyon\r\n      TRANS: [100, 160],  // Geçiş pozisyonu\r\n      PASS: [70, 100]     // Kollar aşağıdayken\r\n  },\r\n  ANGLE_ELBOW_WRIST: {\r\n      NORMAL: [170, 180], // Kollar düz\r\n      TRANS: [120, 170],  // Geçiş pozisyonu\r\n  },\r\n  OFFSET_THRESH: 20.0,    // Simetri hatalarını kontrol için\r\n  INACTIVE_THRESH: 10.0,  // Hareketsizlik toleransı\r\n  CNT_FRAME_THRESH: 50    // Geri bildirim gösterim süresi\r\n};\r\n\r\n\r\n/* TRICEPS EXTENSION */\r\n\r\nexport const thresholdsTricepsExtensionBeginner = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [0, 5], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [6, 15],  // Geçiş pozisyonu\r\n    PASS: [16, 25],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\nexport const thresholdsTricepsExtensionPro = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [25, 30], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [31, 89],  // Geçiş pozisyonu\r\n    PASS: [90, 120],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\n\r\n\r\n/* LATERAL RAISE */\r\n\r\nexport const thresholdsLateralRaiseBeginner = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 15], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [16, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n\r\nexport const thresholdsLateralRaisePro = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 10], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [11, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n"],"names":["webcamRef","useRef","canvasRef","cameraRef","poseRef","navigate","useNavigate","user","useAuth","isBeginnerMode","setIsBeginnerMode","useState","correctCount","setCorrectCount","incorrectCount","setIncorrectCount","isCameraActive","setIsCameraActive","flipFrameRef","currentThresholds","setCurrentThresholds","thresholdsTricepsExtensionBeginner","stateTrackerRef","state_seq","start_inactive_time","Date","now","start_inactive_time_front","INACTIVE_TIME","INACTIVE_TIME_FRONT","DISPLAY_TEXT","Array","fill","COUNT_FRAMES","INCORRECT_POSTURE","prev_state","curr_state","TRICEPS_COUNT","INCORRECT_TRICEPS","startCamera","current","video","cam","onFrame","async","send","image","width","height","start","FEEDBACK_ID_MAP","text","position","color","onResults","useCallback","results","canvas","ctx","getContext","videoWidth","videoHeight","frameWidth","frameHeight","drawImage","displayInactivity","endTime","poseLandmarks","noseCoord","getLandmarkFeatures","leftFeatures","rightFeatures","offsetAngle","findAngle","shoulder","OFFSET_THRESH","INACTIVE_THRESH","drawCircle","colors","white","yellow","magenta","translate","scale","drawText","textColor","backgroundColor","fontSize","toFixed","selectedSideFeatures","multiplier","Math","abs","foot","y","shoulder_vertical_angle","hip","x","verticalStart","verticalEnd","drawDottedLine","blue","elbow_vertical_angle","elbow","wrist_vertical_angle","wrist","drawConnector","light_blue","currState","elbowAngle","ANGLE_ELBOW","NORMAL","TRANS","PASS","newState","updatedStateSeq","includes","filter","state","length","push","updateStateSequence","stateTracker","e","WRIST_THRESH","shoulderTextCoordX","elbowTextCoordX","wristTextCoordX","forEach","displayText","index","feedback","showFeedback","light_green","_","CNT_FRAME_THRESH","setTransform","useEffect","pose","Pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","close","stop","srcObject","getTracks","track","_jsx","_Fragment","children","className","_jsxs","Webcam","ref","style","display","maxWidth","maxHeight","left","top","onChange","event","isBeginner","target","value","newThresholds","thresholdsTricepsExtensionPro","console","log","scope","onClick","startExercise","resetExercise","userId","id","createdDate","toISOString","response","sendResults","exerciseId","correct","incorrect","toast","success","error","message","sendResultsToBackend","LATERAL_RAISE_COUNT","IMPROPER_RAISE","clearRect","fillStyle","fillRect","getLandmarkPosition","landmark","feature","dictFeatures","nose","knee","ankle","right","featureSet","Error","magnitude","v","sqrt","p1","p2","refPt","arguments","undefined","p1Ref","p2Ref","cosTheta","v1","v2","dot","theta","acos","max","min","round","PI","msg","options","boxWidth","fontFamily","paddingX","paddingY","font","textWidth","measureText","textHeight","parseInt","drawRoundedRect","radius","fillColor","beginPath","moveTo","arcTo","closePath","fillText","arc","end","lineWidth","lineTo","strokeStyle","stroke","lineLength","numOfDots","floor","i","dotX","dotY","red","green","cyan","thresholdsBicepsCurl","ELBOW_THRESH","thresholdsSquatBeginner","ANGLE_HIP_KNEE_VERT","HIP_THRESH","ANKLE_THRESH","KNEE_THRESH","thresholdsSquatPro","thresholdsCrunchBeginner","ANGLE_SHOULDER_HIP_VERT","NECK_THRESH","thresholdsCrunchPro","thresholdsLateralRaiseBeginner","ANGLE_SHOULDER","thresholdsLateralRaisePro"],"sourceRoot":""}
{"version":3,"file":"static/js/677.7a873e96.chunk.js","mappings":"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","sources":["components/Exercises/utils/thresholds.js","components/Exercises/utils/crunchUtils.js","components/Exercises/Crunch.jsx"],"sourcesContent":["// BICEPS CURL\r\nexport const thresholdsBicepsCurl = {\r\n    ANGLE_ELBOW: {\r\n      NORMAL: [0, 20],  // Kol tamamen açık (dinlenme durumu)\r\n      TRANS: [21, 70],  // Kol kısmen bükülmüş (geçiş durumu)\r\n      PASS: [71, 140]   // Kol tamamen bükülmüş (tam biceps curl)\r\n    },\r\n    ELBOW_THRESH: [10, 140],  // Minimum ve maksimum bükülme açısı\r\n    INACTIVE_THRESH: 10.0,    // Hareketin inaktif olabileceği maksimum süre (saniye)\r\n    CNT_FRAME_THRESH: 30      // Geri bildirim için gereken minimum kare sayısı\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n//\r\nexport const thresholdsSquatBeginner = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [70, 95]\r\n  },\r\n  HIP_THRESH: [10, 50],\r\n  ANKLE_THRESH: 45,\r\n  KNEE_THRESH: [50, 70, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\nexport const thresholdsSquatPro = {\r\n  ANGLE_HIP_KNEE_VERT: {\r\n      NORMAL: [0, 32],\r\n      TRANS: [35, 65],\r\n      PASS: [80, 95]\r\n  },\r\n  HIP_THRESH: [15, 50],\r\n  ANKLE_THRESH: 30,\r\n  KNEE_THRESH: [50, 80, 95],\r\n  OFFSET_THRESH: 35.0,\r\n  INACTIVE_THRESH: 15.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n/*------------------------------- SQUAT-------------------------------------- */\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\nexport const thresholdsCrunchBeginner = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [30, 60], // Doğru crunch açısı\r\n      TRANS: [61, 75],  // Geçiş açısı\r\n      PASS: [76, 90],   // Maksimum kabul edilebilir açılar\r\n  },\r\n  HIP_THRESH: [0, 10], // Kalça kalkış açısı\r\n  NECK_THRESH: [10, 30], // Boyun doğal pozisyon açısı\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50 // Geri bildirim süresi\r\n};\r\n\r\nexport const thresholdsCrunchPro = {\r\n  ANGLE_SHOULDER_HIP_VERT: {\r\n      NORMAL: [35, 55],\r\n      TRANS: [56, 70],\r\n      PASS: [71, 85],\r\n  },\r\n  HIP_THRESH: [0, 5],\r\n  NECK_THRESH: [5, 20],\r\n  INACTIVE_THRESH: 8.0,\r\n  CNT_FRAME_THRESH: 50\r\n};\r\n\r\n/*------------------------------- CRUNCH-------------------------------------- */\r\n\r\n\r\n/*-------------------------------SHOULDER PRESS----------------------------------- */\r\nexport const thresholdsShoulderPress = {\r\n  ANGLE_SHOULDER_ELBOW: {\r\n      NORMAL: [160, 180], // Kollar yukarıda, doğru pozisyon\r\n      TRANS: [100, 160],  // Geçiş pozisyonu\r\n      PASS: [70, 100]     // Kollar aşağıdayken\r\n  },\r\n  ANGLE_ELBOW_WRIST: {\r\n      NORMAL: [170, 180], // Kollar düz\r\n      TRANS: [120, 170],  // Geçiş pozisyonu\r\n  },\r\n  OFFSET_THRESH: 20.0,    // Simetri hatalarını kontrol için\r\n  INACTIVE_THRESH: 10.0,  // Hareketsizlik toleransı\r\n  CNT_FRAME_THRESH: 50    // Geri bildirim gösterim süresi\r\n};\r\n\r\n\r\n/* TRICEPS EXTENSION */\r\n\r\nexport const thresholdsTricepsExtensionBeginner = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [0, 5], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [6, 15],  // Geçiş pozisyonu\r\n    PASS: [16, 25],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\nexport const thresholdsTricepsExtensionPro = {\r\n  ANGLE_ELBOW: {\r\n    NORMAL: [25, 30], // Dirsek tam uzatılmış pozisyon\r\n    TRANS: [31, 89],  // Geçiş pozisyonu\r\n    PASS: [90, 120],  // Dirsek başlangıç pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı   // Geri bildirim için minimum kare sayısı\r\n};\r\n\r\n\r\n\r\n/* LATERAL RAISE */\r\n\r\nexport const thresholdsLateralRaiseBeginner = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 15], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [16, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n\r\nexport const thresholdsLateralRaisePro = {\r\n  ANGLE_SHOULDER: {\r\n    NORMAL: [0, 10], // Kol başlama pozisyonu (kollar vücuda paralel)\r\n    TRANS: [11, 45], // Geçiş pozisyonu (kol yukarıya doğru hareket eder)\r\n    PASS: [46, 90],  // Kol tam açılma pozisyonu (90 derece)\r\n  },\r\n  OFFSET_THRESH: 20.0,\r\n  INACTIVE_THRESH: 10.0, // İnaktiflik süresi\r\n  CNT_FRAME_THRESH: 50, // Geri bildirim için gereken kare sayısı\r\n};\r\n","// General utility functions for Crunch analysis\r\n\r\nexport const getLandmarkPosition = (landmark, frameWidth, frameHeight) => ({\r\n    x: landmark.x * frameWidth,\r\n    y: landmark.y * frameHeight,\r\n  });\r\n  \r\n  export const getLandmarkFeatures = (poseLandmarks, feature, frameWidth, frameHeight) => {\r\n    const dictFeatures = {\r\n    head: 1, // Baş için referans noktası\r\n    left: {\r\n      shoulder: 11, // Sol omuz\r\n      hip: 23,      // Sol kalça\r\n      knee: 25,     // Sol diz\r\n      ankle: 27,    // Sol ayak bileği\r\n    },\r\n    right: {\r\n      shoulder: 12, // Sağ omuz\r\n      hip: 24,      // Sağ kalça\r\n      knee: 26,     // Sağ diz\r\n      ankle: 28,    // Sağ ayak bileği\r\n    }\r\n  };\r\n  \r\n    if (feature === \"nose\") {\r\n      return getLandmarkPosition(\r\n        poseLandmarks[dictFeatures.nose],\r\n        frameWidth,\r\n        frameHeight\r\n      );\r\n    } else if (feature === \"head\") {\r\n      return getLandmarkPosition(\r\n        poseLandmarks[dictFeatures.head],\r\n        frameWidth,\r\n        frameHeight\r\n      );\r\n    } else if (feature === \"left\" || feature === \"right\") {\r\n      const featureSet = dictFeatures[feature];\r\n      return {\r\n        shoulder: getLandmarkPosition(\r\n          poseLandmarks[featureSet.shoulder],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n        elbow: getLandmarkPosition(\r\n          poseLandmarks[featureSet.elbow],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n        wrist: getLandmarkPosition(\r\n          poseLandmarks[featureSet.wrist],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n        hip: getLandmarkPosition(\r\n          poseLandmarks[featureSet.hip],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n        knee: getLandmarkPosition(\r\n          poseLandmarks[featureSet.knee],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n        ankle: getLandmarkPosition(\r\n          poseLandmarks[featureSet.ankle],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n        foot: getLandmarkPosition(\r\n          poseLandmarks[featureSet.foot],\r\n          frameWidth,\r\n          frameHeight\r\n        ),\r\n      };\r\n    } else {\r\n      throw new Error(\"Feature must be 'nose', 'head', 'left', or 'right'.\");\r\n    }\r\n  };\r\n  \r\n  export const dot = (v1, v2) => v1.x * v2.x + v1.y * v2.y;\r\n  \r\n  export const magnitude = (v) => Math.sqrt(v.x * v.x + v.y * v.y);\r\n  \r\n  export const findAngle = (p1, p2, refPt = { x: 0, y: 0 }) => {\r\n    const p1Ref = { x: p1.x - refPt.x, y: p1.y - refPt.y };\r\n    const p2Ref = { x: p2.x - refPt.x, y: p2.y - refPt.y };\r\n  \r\n    const cosTheta = dot(p1Ref, p2Ref) / (magnitude(p1Ref) * magnitude(p2Ref));\r\n    const theta = Math.acos(Math.max(Math.min(cosTheta, 1.0), -1.0));\r\n    return Math.round(theta * (180 / Math.PI));\r\n  };\r\n  \r\n  export const drawRoundedRect = (\r\n    ctx,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    radius,\r\n    fillColor\r\n  ) => {\r\n    ctx.fillStyle = fillColor;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + radius, y);\r\n    ctx.arcTo(x + width, y, x + width, y + height, radius);\r\n    ctx.arcTo(x + width, y + height, x, y + height, radius);\r\n    ctx.arcTo(x, y + height, x, y, radius);\r\n    ctx.arcTo(x, y, x + width, y, radius);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n  };\r\n  \r\n  export const drawText = (ctx, msg, x, y, options = {}) => {\r\n    const {\r\n      boxWidth = 8,\r\n      textColor = \"rgb(0, 255, 0)\",\r\n      backgroundColor = \"rgb(0, 0, 0)\",\r\n      fontSize = \"16px\",\r\n      fontFamily = \"Arial\",\r\n      paddingX = 20,\r\n      paddingY = 10,\r\n    } = options;\r\n  \r\n    ctx.font = `${fontSize} ${fontFamily}`;\r\n    const textMetrics = ctx.measureText(msg);\r\n    const textWidth = textMetrics.width;\r\n    const textHeight = parseInt(fontSize, 10);\r\n  \r\n    const rectStartX = x - paddingX;\r\n    const rectStartY = y - textHeight - paddingY;\r\n    const rectWidth = textWidth + 2 * paddingX;\r\n    const rectHeight = textHeight + 2 * paddingY;\r\n  \r\n    drawRoundedRect(\r\n      ctx,\r\n      rectStartX,\r\n      rectStartY,\r\n      rectWidth,\r\n      rectHeight,\r\n      boxWidth,\r\n      backgroundColor\r\n    );\r\n    ctx.fillStyle = textColor;\r\n    ctx.fillText(msg, x, y + paddingY / 2);\r\n  };\r\n  \r\n  export const drawCircle = (ctx, position, radius, color) => {\r\n    ctx.beginPath();\r\n    ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  };\r\n  \r\n  export const drawConnector = (ctx, start, end, color, lineWidth) => {\r\n    ctx.beginPath();\r\n    ctx.moveTo(start.x, start.y);\r\n    ctx.lineTo(end.x, end.y);\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.stroke();\r\n  };\r\n  \r\n  export const colors = {\r\n    blue: \"rgb(0,127,255)\",\r\n    red: \"rgb(255,50,50)\",\r\n    green: \"rgb(0,255,127)\",\r\n    light_green: \"rgb(100,233,127)\",\r\n    yellow: \"rgb(255,255,0)\",\r\n    magenta: \"rgb(255,0,255)\",\r\n    white: \"rgb(255,255,255)\",\r\n    cyan: \"rgb(0,255,255)\",\r\n    light_blue: \"rgb(102,204,255)\",\r\n  };\r\n  ","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Pose } from \"@mediapipe/pose\";\r\nimport * as cam from \"@mediapipe/camera_utils\";\r\nimport {\r\n  thresholdsCrunchBeginner,\r\n  thresholdsCrunchPro,\r\n} from \"./utils/thresholds\";\r\nimport {\r\n  getLandmarkFeatures,\r\n  colors,\r\n  findAngle,\r\n  drawText,\r\n  drawCircle,\r\n  drawConnector,\r\n} from \"./utils/crunchUtils\";\r\n\r\nfunction CrunchExercise() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const [isBeginnerMode, setIsBeginnerMode] = useState(true);\r\n  const [currentThresholds, setCurrentThresholds] = useState(\r\n    thresholdsCrunchBeginner\r\n  );\r\n\r\n  const stateTrackerRef = useRef({\r\n    state_seq: [],\r\n    INACTIVE_TIME: 0.0,\r\n    DISPLAY_TEXT: Array(3).fill(false),\r\n    COUNT_FRAMES: Array(3).fill(0),\r\n    CRUNCH_COUNT: 0,\r\n    IMPROPER_CRUNCH: 0,\r\n  });\r\n\r\n  const getState = (shoulderAngle) => {\r\n    let state = null;\r\n    if (\r\n      shoulderAngle >= currentThresholds.ANGLE_SHOULDER_HIP_VERT.NORMAL[0] &&\r\n      shoulderAngle <= currentThresholds.ANGLE_SHOULDER_HIP_VERT.NORMAL[1]\r\n    ) {\r\n      state = \"s1\";\r\n    } else if (\r\n      shoulderAngle >= currentThresholds.ANGLE_SHOULDER_HIP_VERT.TRANS[0] &&\r\n      shoulderAngle <= currentThresholds.ANGLE_SHOULDER_HIP_VERT.TRANS[1]\r\n    ) {\r\n      state = \"s2\";\r\n    } else if (\r\n      shoulderAngle >= currentThresholds.ANGLE_SHOULDER_HIP_VERT.PASS[0] &&\r\n      shoulderAngle <= currentThresholds.ANGLE_SHOULDER_HIP_VERT.PASS[1]\r\n    ) {\r\n      state = \"s3\";\r\n    }\r\n    return state;\r\n  };\r\n\r\n  const onResults = useCallback(\r\n    (results) => {\r\n      if (webcamRef.current && canvasRef.current) {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        canvas.width = webcamRef.current.video.videoWidth;\r\n        canvas.height = webcamRef.current.video.videoHeight;\r\n\r\n        ctx.drawImage(\r\n          webcamRef.current.video,\r\n          0,\r\n          0,\r\n          canvas.width,\r\n          canvas.height\r\n        );\r\n\r\n        if (results.poseLandmarks) {\r\n          const leftFeatures = getLandmarkFeatures(\r\n            results.poseLandmarks,\r\n            \"left\",\r\n            canvas.width,\r\n            canvas.height\r\n          );\r\n\r\n          const shoulderAngle = findAngle(\r\n            leftFeatures.hip,\r\n            leftFeatures.shoulder,\r\n            { x: leftFeatures.shoulder.x, y: 0 }\r\n          );\r\n\r\n          const hipDisplacement = Math.abs(\r\n            leftFeatures.hip.y - leftFeatures.shoulder.y\r\n          );\r\n\r\n          if (hipDisplacement > currentThresholds.HIP_THRESH[1]) {\r\n            stateTrackerRef.current.DISPLAY_TEXT[0] = true;\r\n            stateTrackerRef.current.IMPROPER_CRUNCH++;\r\n          }\r\n\r\n          const neckAngle = findAngle(\r\n            leftFeatures.shoulder,\r\n            leftFeatures.head,\r\n            leftFeatures.head\r\n          );\r\n\r\n          if (\r\n            neckAngle < currentThresholds.NECK_THRESH[0] ||\r\n            neckAngle > currentThresholds.NECK_THRESH[1]\r\n          ) {\r\n            stateTrackerRef.current.DISPLAY_TEXT[1] = true;\r\n            stateTrackerRef.current.IMPROPER_CRUNCH++;\r\n          }\r\n\r\n          const currState = getState(shoulderAngle);\r\n\r\n          if (currState === \"s1\") {\r\n            stateTrackerRef.current.CRUNCH_COUNT++;\r\n            stateTrackerRef.current.state_seq = [];\r\n          } else {\r\n            stateTrackerRef.current.state_seq.push(currState);\r\n          }\r\n\r\n          drawText(\r\n            ctx,\r\n            `Correct Crunches: ${stateTrackerRef.current.CRUNCH_COUNT}`,\r\n            10,\r\n            20,\r\n            { textColor: colors.green }\r\n          );\r\n\r\n          drawText(\r\n            ctx,\r\n            `Incorrect Crunches: ${stateTrackerRef.current.IMPROPER_CRUNCH}`,\r\n            10,\r\n            50,\r\n            { textColor: colors.red }\r\n          );\r\n        }\r\n      }\r\n    },\r\n    [webcamRef, canvasRef, currentThresholds]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const pose = new Pose({\r\n      locateFile: (file) =>\r\n        `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,\r\n    });\r\n\r\n    pose.setOptions({\r\n      modelComplexity: 1,\r\n      smoothLandmarks: true,\r\n      enableSegmentation: false,\r\n      smoothSegmentation: false,\r\n      minDetectionConfidence: 0.5,\r\n      minTrackingConfidence: 0.5,\r\n    });\r\n\r\n    let camera;\r\n    if (webcamRef.current && webcamRef.current.video) {\r\n      camera = new cam.Camera(webcamRef.current.video, {\r\n        onFrame: async () => {\r\n          if (webcamRef.current && webcamRef.current.video) {\r\n            await pose.send({ image: webcamRef.current.video });\r\n          }\r\n        },\r\n        width: 640,\r\n        height: 480,\r\n      });\r\n      camera.start();\r\n    }\r\n\r\n    pose.onResults(onResults);\r\n\r\n    return () => {\r\n      if (camera) {\r\n        camera.stop();\r\n      }\r\n    };\r\n  }, [onResults]);\r\n\r\n  const handleModeChange = (event) => {\r\n    const isBeginner = event.target.value === \"beginner\";\r\n    setIsBeginnerMode(isBeginner);\r\n    setCurrentThresholds(\r\n      isBeginner ? thresholdsCrunchBeginner : thresholdsCrunchPro\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <Webcam ref={webcamRef} style={{ display: \"none\" }} />\r\n            <canvas ref={canvasRef} className=\"w-100 h-100\" />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <select\r\n              onChange={handleModeChange}\r\n              value={isBeginnerMode ? \"beginner\" : \"pro\"}\r\n            >\r\n              <option value=\"beginner\">Beginner Mode</option>\r\n              <option value=\"pro\">Pro Mode</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CrunchExercise;\r\n"],"names":["thresholdsBicepsCurl","ANGLE_ELBOW","NORMAL","TRANS","PASS","ELBOW_THRESH","INACTIVE_THRESH","CNT_FRAME_THRESH","thresholdsSquatBeginner","ANGLE_HIP_KNEE_VERT","HIP_THRESH","ANKLE_THRESH","KNEE_THRESH","OFFSET_THRESH","thresholdsSquatPro","thresholdsCrunchBeginner","ANGLE_SHOULDER_HIP_VERT","NECK_THRESH","thresholdsCrunchPro","thresholdsTricepsExtensionBeginner","thresholdsTricepsExtensionPro","thresholdsLateralRaiseBeginner","ANGLE_SHOULDER","thresholdsLateralRaisePro","getLandmarkPosition","landmark","frameWidth","frameHeight","x","y","magnitude","v","Math","sqrt","findAngle","p1","p2","refPt","arguments","length","undefined","p1Ref","p2Ref","cosTheta","v1","v2","dot","theta","acos","max","min","round","PI","drawText","ctx","msg","options","boxWidth","textColor","backgroundColor","fontSize","fontFamily","paddingX","paddingY","font","textWidth","measureText","width","textHeight","parseInt","drawRoundedRect","height","radius","fillColor","fillStyle","beginPath","moveTo","arcTo","closePath","fill","fillText","colors","webcamRef","useRef","canvasRef","isBeginnerMode","setIsBeginnerMode","useState","currentThresholds","setCurrentThresholds","stateTrackerRef","state_seq","INACTIVE_TIME","DISPLAY_TEXT","Array","COUNT_FRAMES","CRUNCH_COUNT","IMPROPER_CRUNCH","onResults","useCallback","results","current","canvas","getContext","video","videoWidth","videoHeight","drawImage","poseLandmarks","leftFeatures","getLandmarkFeatures","feature","dictFeatures","head","left","shoulder","hip","knee","ankle","right","nose","featureSet","elbow","wrist","foot","Error","shoulderAngle","abs","neckAngle","currState","state","getState","push","useEffect","pose","Pose","locateFile","file","camera","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","cam","onFrame","async","send","image","start","stop","_jsx","className","children","_jsxs","Webcam","ref","style","display","onChange","event","isBeginner","target","value"],"sourceRoot":""}